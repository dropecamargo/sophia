/**
* Class ActividadModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ActividadModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('actividades.index') );
        },
        idAttribute: 'id',
        defaults: {
        	'actividad_codigo': '',	
        	'actividad_nombre': '',	
        	'actividad_tarifa': '0',	
        	'actividad_categoria': ''	
        }
    });

})(this, this.document);

/**
* Class Asignacion1Model extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.Asignacion1Model = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('asignaciones.index') );
        },
        idAttribute: 'id',
        defaults: {
            'asignacion1_fecha': moment().format('YYYY-MM-DD'),
            'asignacion1_tercero': '',
            'asignacion1_tipo': '',
            'asignacion1_contrato': '',
            'asignacion1_direccion': '',
            'asignacion1_municipio': '',
            'asignacion1_area': '',
            'asignacion1_centrocosto': '',
            'asignacion1_zona': '',
            'tercero_nombre':'',
            'tercero_nit':'',
            'tecnico_nombre':'',
            'tecnico_nit':'',
            'contacto_nombre': '',
            'tcontacto_telefono': '',
            'asignacion1_tecnico': '',
            'asignacion1_contacto': '',
            'asignacion2_deproducto': ''
        }
    });

})(this, this.document);

/**
* Class Asignacion2Model extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.Asignacion2Model = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('asignaciones.detalle.index') );
        },
        idAttribute: 'id',
        defaults: {
        	'producto_nombre_search': '',
        	'producto_tipo_search': ''
        }
    });

})(this, this.document);

/**
* Class ContactoModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ContactoModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('terceros.contactos.index') );
        },
        idAttribute: 'id',
        defaults: {
        	'tcontacto_nombres': '',
        	'tcontacto_apellidos': '',
        	'tcontacto_telefono': '',
        	'tcontacto_celular': '',
            'tcontacto_municipio': '',
        	'tcontacto_direccion': '',
        	'tcontacto_email': '',
        	'tcontacto_cargo': ''
        }
    });

})(this, this.document);
/**
* Class ContadorModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ContadorModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('contadores.index') );
        },
        idAttribute: 'id',
        defaults: {
            'contador_nombre': '',
            'contador_activo': true
        }
    });

})(this, this.document);

/**
* Class ContadorespModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

app || (app = {});

(function (window, document, undefined){

    app.ContadorespModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull (Route.route('ordenes.contadoresp.index') );
        },
        idAttribute: 'id',
        defaults: {  
       		'contadoresp_valor': ''
        }
    });

}) (this, this.document);
/**
* Class ContratoModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

app || (app = {});

(function (window, document, undefined){

    app.ContratoModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull (Route.route('contratos.index') );
        },
        idAttribute: 'id',
        defaults: {
            'contrato_numero': '',
            'contrato_tercero': '',
            'tercero_nit': '',
            'tercero_nombre': '',
            'contrato_fecha': moment().format('YYYY-MM-DD'),
            'contrato_vencimiento': moment().format('YYYY-MM-DD'),
            'contrato_activo': true,
            'contrato_condiciones': ''
            //'dano_nombre': '',
            //'dano_activo': true
        }
    });

}) (this, this.document);
/**
* Class ContratoModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

app || (app = {});

(function (window, document, undefined){

    app.ContratoDanoModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull (Route.route('contratos.danoc.index') );
        },
        idAttribute: 'id',
        defaults: {
            'contratodano_contrato': '',
            'contratodano_dano': '',
            'contratodano_tiempo': '',
            'dano_activo': ''   
           
        }
    });

}) (this, this.document);
/**
* Class DanoModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.DanoModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('danos.index') );
        },
        idAttribute: 'id',
        defaults: {
            'dano_nombre': '',
            'dano_activo': true
        }
    });

})(this, this.document);

/**
* Class EstadoModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.EstadoModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('estados.index') );
        },
        idAttribute: 'id',
        defaults: {
            'estado_nombre': '',
            'estado_activo': true
        }
    });

})(this, this.document);

/**
* Class MarcaModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.MarcaModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('marcas.index') );
        },
        idAttribute: 'id',
        defaults: {
            'marca_modelo': '',
            'marca_activo': true
        }
    });

})(this, this.document);

/**
* Class ModeloModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ModeloModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('modelos.index') );
        },
       	idAttribute: 'id',
        defaults: {
            'modelo_nombre': '',
            'modelo_activo': true
        }
    });

})(this, this.document);
/**
* Class OrdenModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

app || (app = {});

(function (window, document, undefined){

    app.OrdenModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull (Route.route('ordenes.index') );
        },
        idAttribute: 'id',
        defaults: {

            'orden_fecha': moment().format('YYYY-MM-DD'),
            'orden_tercero': '',
            'orden_tipoorden':'',
            'orden_solicitante':'',
            'orden_placa':'',
            'tercero_nombre':'',
            'tercero_nit':'',
            'tecnico_nombre':'',
            'tecnico_nit':'',
            'producto_id': '',
            'producto_serie':'',
            'producto_nombre':'',
            'orden_persona':'',
            'orden_dano':'',
            'orden_prioridad':'',
            'orden_problema': '',
            'orden_abierta': true,
            'orden_fecha_servicio':moment().format('YYYY-MM-DD'),
            'orden_hora_servicio':moment().format('HH:mm')          
        }
    });

}) (this, this.document);
/**
* Class PrioridadModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.PrioridadModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('prioridades.index') );
        },
        idAttribute: 'id',
        defaults: {
            'prioridad_nombre': '',
            'prioridad_activo': true
        }
    });

})(this, this.document);

/**
* Class ProductoModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ProductoModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('productos.index') );
        },
        idAttribute: 'id',
        defaults: {
            'producto_placa': '',
            'producto_serie': '',
            'producto_referencia': '',
            'producto_codigo': '',
            'producto_nombre': '',
            'producto_tipo': '',
            'producto_marca': '',
            'producto_modelo': '',
            'producto_estado': '',
            'producto_parte': '',
            'tercero_nit': '',
            'tercero_nombre':'',
            'producto_proveedor': '',
            'producto_vida_util': '',
            'contador_nombre': '',
            'tipo_codigo': '',
            'producto_costo_promedio': '',
            'producto_ultimo_costo': ''
        }
    });

})(this, this.document);

/**
* Class ProductoContadorModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ProductoContadorModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('productos.productoscontador.index') );
        },
        idAttribute: 'id',
        defaults: {
            'productocontador_producto': '',
            'productocontador_contador': ''
        }
    });

})(this, this.document);

/**
* Class SirveaModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.SirveaModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('productos.sirveas.index') );
        },
        idAttribute: 'id',
        defaults: {
            'sirvea_codigo': '',
            'sirvea_maquina': ''
        }
    });

})(this, this.document);

/**
* Class SolicitanteModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.SolicitanteModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('solicitantes.index') );
        },
        idAttribute: 'id',
        defaults: {
            'solicitante_nombre': '',
            'solicitante_activo': true
        }
    });

})(this, this.document);

/**
* Class SucursalModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.SucursalModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('sucursales.index') );
        },
        idAttribute: 'id',
        defaults: {
        	'sucursal_nombre': '',
        	'sucursal_direccion': '',
        }
    });

})(this, this.document);

/**
* Class TerceroModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.TerceroModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('terceros.index') );
        },
        idAttribute: 'id',
        defaults: {
            'tercero_nit': '',
            'tercero_digito': '',
            'tercero_regimen' : '',
            'tercero_tipo' : '',
            'tercero_persona' : '',
            'tercero_razonsocial' : '',
            'tercero_nombre1' : '',
            'tercero_nombre2' : '',
            'tercero_apellido1' : '',
            'tercero_apellido2' : '',
            'tercero_direccion' : '',
            'tercero_municipio' : '',
            'tercero_email' : '',
            'tercero_telefono1' : '',
            'tercero_telefono2' : '',
            'tercero_fax' : '',
            'tercero_celular' : '',
            'tercero_actividad' : '',
            'tercero_cc_representante' : '',
            'tercero_representante' : '',
            'tercero_activo': false,
            'tercero_responsable_iva': false,
            'tercero_autoretenedor_cree': false,
            'tercero_gran_contribuyente': false,
            'tercero_autoretenedor_renta': false,
            'tercero_autoretenedor_ica': false,
            'tercero_socio': false,
            'tercero_cliente': false,
            'tercero_acreedor': false,
            'tercero_interno': false,
            'tercero_mandatario': false,
            'tercero_empleado': false,
            'tercero_proveedor': false,
            'tercero_extranjero': false,
            'tercero_afiliado': false,
            'tercero_otro': false,
            'tercero_cual': '',
            'actividad_tarifa' : ''
        }
    });

})(this, this.document);

/**
* Class TipoModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.TipoModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('tipos.index') );
        },
        idAttribute: 'id',
        defaults: {
        	'tipo_codigo': '',
            'tipo_nombre': '',
            'tipo_activo': true
        }
    });

})(this, this.document);
/**
* Class TipoOrdenModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.TipoOrdenModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('tiposorden.index') );
        },
        idAttribute: 'id',
        defaults: {
            'tipoorden_nombre': '',
            'tipoorden_activo': true
        }
    });

})(this, this.document);

/**
* Class VisitaModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

app || (app = {});

(function (window, document, undefined){

    app.VisitaModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull (Route.route('ordenes.visitas.index') );
        },
        idAttribute: 'id',

        defaults: {
            'visita_orden': '',
            'visita_tecnico': '',
            'visita_numero': '',
            'visita_fecha_llegada': moment().format('YYYY-MM-DD'),
            'visita_fecha_inicio': moment().format('YYYY-MM-DD'),
            'visita_fecha_fin': moment().format('YYYY-MM-DD'),
            'visita_fh_finaliza': '',
            'visita_tiempo_transporte': '',
            'visita_viaticos': '',
            'tercero_nombre': ''
        }
    });

}) (this, this.document);
/**
* Class VisitaModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

app || (app = {});

(function (window, document, undefined){

    app.VisitapModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull (Route.route('ordenes.visitasp.index') );
        },
        idAttribute: 'id',
        defaults: {
 			'visitap_orden': '',
            'visitap_cantidad': '',
 			'visitap_nombre': '',
 			'visitasp_codigo': ''
        }
    });

}) (this, this.document);
/**
* Class ZonaModel extend of Backbone Model
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ZonaModel = Backbone.Model.extend({

        urlRoot: function () {
            return window.Misc.urlFull( Route.route('zonas.index') );
        },
        idAttribute: 'id',
        defaults: {
            'zona_nombre': '',
            'zona_activo': true
        }
    });

})(this, this.document);

/**
* Class Asignacion2sList of Backbone Collection
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.Asignacion2sList = Backbone.Collection.extend({

        url: function() {
            return window.Misc.urlFull( Route.route('asignaciones.detalle.index') );
        },
        model: app.Asignacion2Model,

        /**
        * Constructor Method
        */
        initialize : function(){
        }
   });
})(this, this.document);

/**
* Class ContratosList of Backbone Collection
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ContratosList = Backbone.Collection.extend({

        url: function() {
            return window.Misc.urlFull( Route.route('contratos.danoc.index') );
        },
        model: app.ContratoDanoModel,

        /**
        * Constructor Method
        */
        initialize : function(){
        }
   });
})(this, this.document);


/**
* Class contadoresp of Backbone Collection
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ContadorespCollection = Backbone.Collection.extend({

        url: function() {
            return window.Misc.urlFull( Route.route('ordenes.contadoresp.index') );
        },
        model: app.ContadorespModel,

        /**
        * Constructor Method
        */
        initialize : function(){
        }
   });
})(this, this.document);


/**
* Class visita of Backbone Collection
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.VisitaCollection = Backbone.Collection.extend({

        url: function() {
            return window.Misc.urlFull( Route.route('ordenes.visitas.index') );
        },
        model: app.VisitaModel,

        /**
        * Constructor Method
        */
        initialize : function(){
        }
   });
})(this, this.document);


/**
* Class visitap of Backbone Collection
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.VisitapCollection = Backbone.Collection.extend({

        url: function() {
            return window.Misc.urlFull( Route.route('ordenes.visitasp.index') );
        },
        model: app.VisitapModel,

        /**
        * Constructor Method
        */
        initialize : function(){
        }
   });
})(this, this.document);


/**
* Class ProductosContadorList of Backbone Collection
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ProductosContadorList = Backbone.Collection.extend({

        url: function() {
            return window.Misc.urlFull( Route.route('productos.productoscontador.index') );
        },
        model: app.ProductoContadorModel,

        /**
        * Constructor Method
        */
        initialize : function(){
        }
   });
})(this, this.document);

/**
* Class SirveasList of Backbone Collection
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.SirveasList = Backbone.Collection.extend({

        url: function() {
            return window.Misc.urlFull( Route.route('productos.sirveas.index') );
        },
        model: app.SirveaModel,

        /**
        * Constructor Method
        */
        initialize : function(){
        }
   });
})(this, this.document);

/**
* Class ContactsList of Backbone Collection
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function (window, document, undefined) {

    app.ContactsList = Backbone.Collection.extend({

        url: function() {
            return window.Misc.urlFull( Route.route('terceros.contactos.index') );
        },
        model: app.ContactoModel,

        /**
        * Constructor Method
        */
        initialize : function(){
        }
   });
})(this, this.document);

/**
* Class CreateActividadView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateActividadView = Backbone.View.extend({

        el: '#actividad-create',
        template: _.template( ($('#add-actividad-tpl').html() || '') ),
        events: {
            'submit #form-actividad': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {      
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);
            
            // Attributes 
            this.$wraperForm = this.$('#render-form-actividad');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {
            
                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );                
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();  
        },
        
        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();

            if( typeof window.initComponent.initSpinner == 'function' )
                window.initComponent.initSpinner();         
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('actividades.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainActividadView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainActividadView = Backbone.View.extend({

        el: '#actividades-main',

        /**
        * Constructor Method
        */
        initialize : function() {
            
            this.$actividadesSearchTable = this.$('#actividades-search-table');

            this.$actividadesSearchTable.DataTable({
				dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                        "<'row'<'col-sm-12'tr>>" +
                        "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('actividades.index') ),
                columns: [
                    { data: 'actividad_codigo', name: 'actividad_codigo' },
                    { data: 'actividad_nombre', name: 'actividad_nombre'},
                    { data: 'actividad_categoria', name: 'actividad_categoria'}, 
                    { data: 'actividad_tarifa', name: 'actividad_tarifa' }
                ],
                buttons: [
                    { 
                        text: '<i class="fa fa-user-plus"></i> Nueva actividad', 
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                                window.Misc.redirect( window.Misc.urlFull( Route.route('actividades.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '15%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('actividades.show', {actividades: full.id }) )  +'">' + data + '</a>';
                        }
                    }
                ]
			});
        }
    });

})(jQuery, this, this.document);

/**
* Class TrasladoProductosListView of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.Asignacion2sListView = Backbone.View.extend({

        el: '#browse-asignacion2-list',
        events: {
            'click .item-asignacion2-remove': 'removeOne'
        },
        parameters: {
            wrapper: null,
            edit: false,
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize : function(opts){
            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            // Init Attributes
            this.confCollection = { reset: true, data: {} };

            // // Events Listeners
            this.listenTo( this.collection, 'add', this.addOne );
            this.listenTo( this.collection, 'reset', this.addAll );
            this.listenTo( this.collection, 'request', this.loadSpinner );
            this.listenTo( this.collection, 'store', this.storeOne );
            this.listenTo( this.collection, 'sync', this.responseServer );

            /* if was passed asignacion2 code */
            if( !_.isUndefined(this.parameters.dataFilter.asignacion2) && !_.isNull(this.parameters.dataFilter.asignacion2) ){
                 this.confCollection.data.asignacion2 = this.parameters.dataFilter.asignacion2;

                this.collection.fetch( this.confCollection );
            }
        },

        /**
        * Render view task by model
        * @param Object mentoringTaskModel Model instance
        */
        addOne: function (Asignacion2Model) {
            var view = new app.Asignacion2sItemView({
                model: Asignacion2Model,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            Asignacion2Model.view = view;
            this.$el.append( view.render().el );
        },

        /**
        * Render all view tast of the collection
        */
        addAll: function () {
            this.collection.forEach( this.addOne, this );
        },

        /**
        * storescuenta
        * @param form element
        */
        storeOne: function (form) {
            var _this = this,
            data = window.Misc.formToJson( form );

            // Set Spinner
            window.Misc.setSpinner( this.parameters.wrapper );

            // Add model in collection
            var asignacion2Model = new app.Asignacion2Model();
            asignacion2Model.save(data, {
                success : function(model, resp) {
                    if(!_.isUndefined(resp.success)) {
						window.Misc.removeSpinner( _this.parameters.wrapper );

                        // response success or error
                        var text = resp.success ? '' : resp.errors;
                        if( _.isObject( resp.errors ) ) {
                            text = window.Misc.parseErrors(resp.errors);
                        }

                        if( !resp.success ) {
                            alertify.error(text);
                            return;
                        }

                        // Add model in collection
                        _this.collection.add(model);
                    }
                },
                error : function(model, error) {
                    window.Misc.removeSpinner( _this.parameters.wrapper );
                    alertify.error(error.statusText)
                }
            });
        },

        /**
        * Event remove item
        */
        removeOne: function (e) {
            e.preventDefault();

            var resource = $(e.currentTarget).attr("data-resource");
            var model = this.collection.get(resource);
            if ( model instanceof Backbone.Model ) {
                model.view.remove();
                this.collection.remove(model);
            }
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.parameters.wrapper );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.parameters.wrapper );
        }
   });

})(jQuery, this, this.document);

/**
* Class Asignacion2sItemView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.Asignacion2sItemView = Backbone.View.extend({

        tagName: 'tr',
        template: _.template( ($('#add-asignacion2-item-tpl').html() || '') ),
        events: {
        },
        parameters: {
            edit: false
        },

        /**
        * Constructor Method
        */
        initialize: function(opts){
            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            // Events Listener
            this.listenTo( this.model, 'change', this.render );
        },

        /*
        * Render View Element
        */
        render: function(){
            var attributes = this.model.toJSON();
            attributes.edit = this.parameters.edit;
            this.$el.html( this.template(attributes) );

            return this;
        }
    });

})(jQuery, this, this.document);
/**
* Class CreateAsignacion1View  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateAsignacion1View = Backbone.View.extend({

        el: '#asignacion1-create',
        template: _.template( ($('#add-asignacion1-tpl').html() || '') ),
        events: {
            'click .submit-asignacion1': 'submitAsignacion1',
            'click .btn-koi-search-tercero-component-table': 'limpiar',
            'submit #form-asignacion1': 'onStore',
            'submit #form-asignacion2': 'onStoreA2'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-asignacion1');

            this.asignacion2sList = new app.Asignacion2sList();

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            // References
            this.$form = this.$('#form-asignacion1');
            this.$formItem = this.$('#form-asignacion2');

            this.$inputContacto = $('#tcontacto_nombre');
            this.$inputTcontacto = $('#tcontacto_telefono');
            this.$inputContrato = $('#nombre_contrato');

            // Reference views
            this.referenceViews();
        },


        /**
        * reference to views
        */
        referenceViews: function () {
            // Detalle Asignacion2 list
            this.asignacion2sListView = new app.Asignacion2sListView({
                collection: this.asignacion2sList,
                parameters: {
                    wrapper: this.el,
                    edit: true,
                 
                }
            });
        },

        /**
        * Event submit asignacion1
        */
        submitAsignacion1: function (e) {
            this.$form.submit();
        },

        limpiar: function(){
            this.$inputContrato.val('');
            this.$inputTcontacto.val('');
            this.$inputContacto.val('');
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                data.asignacion2 = this.asignacion2sList.toJSON();

                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /**
        * Event add item detalle traslado
        */
        onStoreA2: function (e) {
            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                this.asignacion2sList.trigger( 'store', this.$(e.target) );
            }
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('asignaciones.show', { asignaciones: resp.id})) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainAsignacion1sView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainAsignacion1sView = Backbone.View.extend({

        el: '#asignacion1s-main',
        events: {
            'click .btn-search': 'search',
            'click .btn-clear': 'clear'
        },

        /**
        * Constructor Method
        */
        initialize : function() {
            var _this = this;

            // References
            this.$asignacion1sSearchTable = this.$('#asignacion1s-search-table');
            this.$searchasignacion1Tercero = this.$('#searchasignacion1_tercero');
            this.$searchasignacion1TerceroName = this.$('#searchasignacion1_tercero_nombre');
            this.$searchasignacion1Tipo = this.$('#searchasignacion1_tipo');
            this.$searchasignacion1Tecnico = this.$('#searchasignacion1_tecnico');
            this.$searchasignacion1TecnicoName = this.$('#searchasignacion1_tecnico_nombre');


            this.asignacion1sSearchTable = this.$asignacion1sSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull( Route.route('asignaciones.index') ),
                    data: function( data ) {
                        data.persistent = true;
                        data.tercero_nit = _this.$searchasignacion1Tercero.val();
                        data.tercero_nombre = _this.$searchasignacion1TerceroName.val();
                        data.asignacion1_tipo = _this.$searchasignacion1Tipo.val();
                        data.tecnico_nit = _this.$searchasignacion1Tecnico.val();
                        data.tecnico_nombre = _this.$searchasignacion1TecnicoName.val();         
                    }
                },
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'tercero_nombre', name: 'asignacion1_tercero' },
                    { data: 'tecnico_nombre', name: 'asignacion1_tecnico'},
                    { data: 'asignacion1_tipo', name: 'asignacion1_tipo'},
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-plus"></i> Nueva Asignacion',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('asignaciones.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('asignaciones.show', {asignaciones: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 3,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return (data=='E') ? 'Envio' : 'Retiro';
                        },
                    }
                ]
            });
        },

        search: function(e) {
            e.preventDefault();

            this.asignacion1sSearchTable.ajax.reload();
        },

        clear: function(e) {
            e.preventDefault();

            this.$searchasignacion1Tercero.val('');
            this.$searchasignacion1TerceroName.val('');
            this.$searchasignacion1Tipo.val('');
            this.$searchasignacion1Tecnico.val('');
            this.$searchasignacion1TecnicoName.val('')

            this.asignacion1sSearchTable.ajax.reload();
        },
    });

})(jQuery, this, this.document);

/**
* Class ShowAsignacion2View
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ShowAsignacion1View = Backbone.View.extend({

        el: '#asignacion-show',

        /**
        * Constructor Method
        */
        initialize : function() {
            // Model exist
            if( this.model.id != undefined ) {

            	this.asignacion2sList = new app.Asignacion2sList();

                // Reference views
                this.referenceViews();
            }
        },

        /**
        * reference to views
        */
        referenceViews: function () {
    		// Detalle asignaciones list
            this.asignacion2sListView = new app.Asignacion2sListView({
                collection: this.asignacion2sList,
                parameters: {
                    wrapper: this.el,
                    edit: false,
                    dataFilter: {
                    	asignacion2: this.model.get('id')
                    }
                }
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class ConfirmWindow
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ConfirmWindow = Backbone.View.extend({

        el: '#modal-confirm-component',
        parameters: {
            template: null,
            titleConfirm: '',
            onConfirm: null,
            callBack: null,
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {

            // extends attributtes
            if( opts != undefined && _.isObject(opts.parameters) )
                this.parameters = _.extend({}, this.parameters, opts.parameters );

        },

        /*
        * Render View Element
        */
        render: function() {
            var attributes = {};

            // Extend attributes confirm window
           	_.extend(attributes, this.parameters.dataFilter);
            this.$el.find('.content-modal').html( this.parameters.template(attributes) );

            // Change modal title
            this.$el.find('.inner-title-modal').html( this.parameters['titleConfirm'] );
			this.$el.modal('show');

            // delegate events
	        $(this.el).off('click', '.confirm-action');
            this.undelegateEvents();
            this.delegateEvents({ 'click .confirm-action': 'onConfirm' });

            return this;
        },

        /**
        * Confirm
        */
        onConfirm: function (e) {

            e.preventDefault();
            var _this = this;

			this.$el.modal('hide');

            if( typeof this.parameters.onConfirm == 'function' ) {
                this.parameters.onConfirm.call(null, this.parameters.dataFilter );
            }
        }
   });

})(jQuery, this, this.document);

/**
* Class ComponentCreateResourceView  of Backbone
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ComponentCreateResourceView = Backbone.View.extend({

      	el: 'body',
		events: {
            'click .btn-add-resource-koi-component': 'addResource',
            'submit #form-create-resource-component': 'onStore'
		},
        parameters: {
        },

        /**
        * Constructor Method
        */
		initialize: function(opts) {
            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

			// Initialize
            this.$modalComponent = this.$('#modal-add-resource-component');
            this.$wraperError = this.$('#error-resource-component');
            this.$wraperContent = this.$('#content-create-resource-component').find('.modal-body');
		},

		/**
        * Display form modal resource
        */
		addResource: function(e) {
            // References
            this.resource = $(e.currentTarget).attr("data-resource");
            this.$resourceField = $("#"+$(e.currentTarget).attr("data-field"));
            this.parameters = {};

            if(this.resource == 'contacto') {
                this.$inputPhone = this.$("#"+$(e.currentTarget).attr("data-phone"));
                this.$inputAddress = this.$("#"+$(e.currentTarget).attr("data-address"));
                this.$inputCity = this.$("#"+$(e.currentTarget).attr("data-city"));
                this.$inputEmail = this.$("#"+$(e.currentTarget).attr("data-email"));
                this.parameters.tcontacto_tercero = $(e.currentTarget).attr("data-tercero");
                if( _.isUndefined(this.parameters.tcontacto_tercero) || _.isNull(this.parameters.tcontacto_tercero) || this.parameters.tcontacto_tercero == '') {
                    alertify.error('Por favor ingrese cliente antes agregar contacto.');
                    return;
                }
            }

            // stuffToDo resource
            var _this = this,
	            stuffToDo = {
                    'marca' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Marca');

                        _this.model = new app.MarcaModel();
                        var template = _.template($('#add-marca-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
                    'tipo' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Tipo');

                        _this.model = new app.TipoModel();
                        var template = _.template($('#add-tipo-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
                    'tipoorden' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Tipo Orden');

                        _this.model = new app.TipoOrdenModel();
                        var template = _.template($('#add-tipoorden-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
                    'modelo' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Modelo');

                        _this.model = new app.ModeloModel();
                        var template = _.template($('#add-modelo-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
                    'estado' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Estado');

                        _this.model = new app.EstadoModel();
                        var template = _.template($('#add-estado-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
                    'dano' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Daño');

                        _this.model = new app.DanoModel();
                        var template = _.template($('#add-dano-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },

                    'prioridad' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Prioridad');

                        _this.model = new app.PrioridadModel();
                        var template = _.template($('#add-prioridad-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
                    'solicitante' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Solicitante');

                        _this.model = new app.SolicitanteModel();
                        var template = _.template($('#add-solicitante-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
                    
	                'tercero' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Tercero');

                        _this.model = new app.TerceroModel();
                        var template = _.template($('#add-tercero-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
                    'producto' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Producto');

                        _this.model = new app.ProductoModel();
                        var template = _.template($('#add-producto-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
                    'pcontador' : function() {
                        _this.$modalComponent.find('.inner-title-modal').html('Producto Contador');

                        _this.model = new app.ContadorModel();
                        var template = _.template($('#add-contador-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
                    'contacto' : function() {
                        _this.$resourceName = $("#"+$(e.currentTarget).attr("data-name"));
                        _this.$modalComponent.find('.inner-title-modal').html('Contacto');

                        _this.model = new app.ContactoModel();
                        var template = _.template($('#add-contacto-tpl').html());
                        _this.$modalComponent.find('.content-modal').html( template(_this.model.toJSON()) );
                    },
	            };

            if (stuffToDo[this.resource]) {
                stuffToDo[this.resource]();

                this.$wraperError.hide().empty();

	            // Events
            	this.listenTo( this.model, 'sync', this.responseServer );
            	this.listenTo( this.model, 'request', this.loadSpinner );

                // to fire plugins
                this.ready();

				this.$modalComponent.modal('show');
            }
		},

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();

            if( typeof window.initComponent.initInputMask == 'function' )
                window.initComponent.initInputMask();

            if( typeof window.initComponent.initSelect2 == 'function' )
                window.initComponent.initSelect2();

            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
        },

        /**
        * Event Create Post
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                this.$wraperError.hide().empty();

                e.preventDefault();
                var data = $.extend({}, this.parameters, window.Misc.formToJson( e.target ));

                this.model.save( data, {patch: true} );
            }
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.$wraperContent );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.$wraperContent );

            // response success or error
            var text = resp.success ? '' : resp.errors;
            if( _.isObject( resp.errors ) ) {
                text = window.Misc.parseErrors(resp.errors);
            }

            if( !resp.success ) {
                this.$wraperError.empty().append(text);
                this.$wraperError.show();
                return;
            }

            // stuffToDo Response success
            var _this = this,
                stuffToDo = {
                    'marca' : function() {
                        _this.$resourceField.select2({ data: [{id: _this.model.get('id'), text: _this.model.get('marca_modelo')}] }).trigger('change');
                        _this.$resourceField.val(_this.model.get('id')).trigger('change');
                    },
                    'tipo' : function() {
                        _this.$resourceField.select2({ data: [{id: _this.model.get('id'), text: _this.model.get('tipo_nombre')}] }).trigger('change');
                        _this.$resourceField.val(_this.model.get('id')).trigger('change');
                    },
                    'tipoorden' : function() {
                        _this.$resourceField.select2({ data: [{id: _this.model.get('id'), text: _this.model.get('tipoorden_nombre')}] }).trigger('change');
                        _this.$resourceField.val(_this.model.get('id')).trigger('change');
                    },
                    'modelo' : function() {
                        _this.$resourceField.select2({ data: [{id: _this.model.get('id'), text: _this.model.get('modelo_nombre')}] }).trigger('change');
                        _this.$resourceField.val(_this.model.get('id')).trigger('change');
                    },
                    'estado' : function() {
                        _this.$resourceField.select2({ data: [{id: _this.model.get('id'), text: _this.model.get('estado_nombre')}] }).trigger('change');
                        _this.$resourceField.val(_this.model.get('id')).trigger('change');
                    },
                    'dano' : function() {
                       _this.$resourceField.select2({ data: [{id: _this.model.get('id'), text: _this.model.get('dano_nombre')}] }).trigger('change');
                        _this.$resourceField.val(_this.model.get('id')).trigger('change');
                    },
                    'prioridad' : function() {
                       _this.$resourceField.select2({ data: [{id: _this.model.get('id'), text: _this.model.get('prioridad_nombre')}] }).trigger('change');
                        _this.$resourceField.val(_this.model.get('id')).trigger('change');
                    },
                     'solicitante' : function() {
                       _this.$resourceField.select2({ data: [{id: _this.model.get('id'), text: _this.model.get('solicitante_nombre')}] }).trigger('change');
                        _this.$resourceField.val(_this.model.get('id')).trigger('change');
                    },
                    'tercero' : function() {
                        _this.$resourceField.val(_this.model.get('tercero_nit')).trigger('change');
                    },
                    'producto' : function() {
                        _this.$resourceField.val(_this.model.get('sirvea_codigo')).trigger('change');
                    },
                    'pcontador' : function() {
                       _this.$resourceField.select2({ data: [{id: _this.model.get('id'), text: _this.model.get('contador_nombre')}] }).trigger('change');
                        _this.$resourceField.val(_this.model.get('id')).trigger('change');
                    },
                    'contacto' : function() {
                        _this.$resourceField.val(_this.model.get('id'));
                        _this.$resourceName.val(_this.model.get('tcontacto_nombre'));

                        if(_this.$inputPhone.length) {
                            _this.$inputPhone.val( _this.model.get('tcontacto_telefono') );
                        }

                        if(_this.$inputAddress.length) {
                            _this.$inputAddress.val( _this.model.get('tcontacto_direccion') );
                        }

                        if(_this.$inputEmail.length) {
                            _this.$inputEmail.val( _this.model.get('tcontacto_email') );
                        }

                        if(_this.$inputCity.length) {
                            _this.$inputCity.val( _this.model.get('tcontacto_municipio') ).trigger('change');
                        }
                    },
                };

            if (stuffToDo[this.resource]) {
                stuffToDo[this.resource]();

                // Fires libraries js
                if( typeof window.initComponent.initSelect2 == 'function' )
                    window.initComponent.initSelect2();

                this.$modalComponent.modal('hide');
            }
        }
    });


})(jQuery, this, this.document);

/**
* Class ComponentGlobalView  of Backbone
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ComponentGlobalView = Backbone.View.extend({

      	el: 'body',
		events: {
            'click .sidebar-toggle': 'clickSidebar'
		},

        /**
        * Constructor Method
        */
		initialize: function() {
			// Initialize
		},

		clickSidebar: function(e) {
			e.preventDefault();

			var expiration = new Date();
			expiration.setFullYear(expiration.getFullYear() + 1);

			// Create or update the cookie:
			document.cookie = "sidebar_toggle=" + (this.$el.hasClass('sidebar-collapse') ? '' : 'sidebar-collapse') + "; path=/; expires=" + expiration.toUTCString();
		}
    });


})(jQuery, this, this.document);

/**
* Class ComponentReportView  of Backbone
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ComponentReportView = Backbone.View.extend({

      	el: 'body',
		events: {
			'click .btn-export-pdf-koi-component': 'onPdf',
			'click .btn-export-xls-koi-component': 'onXls',
		},

        /**
        * Constructor Method
        */
		initialize: function() {
			// Initialize
		},

		onPdf: function(e) {
			this.$("#type-report-koi-component").val('pdf');
		},

		onXls: function(e) {
			this.$("#type-report-koi-component").val('xls');
		}
    });


})(jQuery, this, this.document);

/**
* Class ComponentSearchContactoView of Backbone
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ComponentSearchContactoView = Backbone.View.extend({

      	el: 'body',
        template: _.template( ($('#koi-search-contacto-component-tpl').html() || '') ),

		events: {
            'click .btn-koi-search-contacto-component-table': 'searchOrden',
            'click .btn-search-koi-search-contacto-component': 'search',
            'click .btn-clear-koi-search-contacto-component': 'clear',
            'click .a-koi-search-contacto-component-table': 'setContacto'
		},

        /**
        * Constructor Method
        */
		initialize: function() {
			// Initialize
            this.$modalComponent = this.$('#modal-search-contacto-component');
		},

		searchOrden: function(e) {
            
            e.preventDefault();
            var _this = this;

            // Render template
            this.$modalComponent.find('.content-modal').html( this.template({ }) );

            // References
            this.$searchContactoNombres = this.$('#koi_search_contacto_nombres');
            this.$searchContactoApellidos = this.$('#koi_search_contacto_apellidos');

            // Validate tercero
			this.$resourceTercero = this.$("#"+$(e.currentTarget).attr("data-tercero"));
			var tercero = this.$resourceTercero.attr("data-tercero");
            if( _.isUndefined(tercero) || _.isNull(tercero) || tercero == '') {
                alertify.error('Por favor ingrese cliente antes agregar contacto.');
                return;
            }

            this.$contactoSearchTable = this.$modalComponent.find('#koi-search-contacto-component-table');
			this.$inputContent = this.$("#"+$(e.currentTarget).attr("data-field"));
			this.$inputName = this.$("#"+$(e.currentTarget).attr("data-name"));
            this.$inputPhone = this.$("#"+$(e.currentTarget).attr("data-phone"));
            this.$inputAddress = this.$("#"+$(e.currentTarget).attr("data-address"));
            this.$inputCity = this.$("#"+$(e.currentTarget).attr("data-city"));
			this.$inputEmail = this.$("#"+$(e.currentTarget).attr("data-email"));

			this.contactoSearchTable = this.$contactoSearchTable.DataTable({
				dom: "<'row'<'col-sm-12'tr>>" +
					"<'row'<'col-sm-5'i><'col-sm-7'p>>",
				processing: true,
                serverSide: true,
            	language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull( Route.route('terceros.contactos.index') ),
                    data: function( data ) {
                        data.tcontacto_nombres = _this.$searchContactoNombres.val(),
                        data.tcontacto_apellidos = _this.$searchContactoApellidos.val(),
                        data.tcontacto_tercero = tercero
                    }
                },
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'tcontacto_nombres', name: 'tcontacto_nombres' },
                    { data: 'tcontacto_apellidos', name: 'tcontacto_apellidos' },
                    { data: 'tcontacto_nombre', name: 'tcontacto_nombre' },
                    { data: 'tcontacto_telefono', name: 'tcontacto_telefono' },
                    { data: 'municipio_nombre', name: 'municipio_nombre' },
                    { data: 'tcontacto_direccion', name: 'tcontacto_direccion' },
                    { data: 'tcontacto_municipio', name: 'tcontacto_municipio' },
                    { data: 'tcontacto_email', name: 'tcontacto_email' }
                ],
                columnDefs: [
                    {
                        targets: 3,
                        width: '40%',
                        searchable: false,
                        render: function ( data, type, full, row ) {
                        	return '<a href="#" class="a-koi-search-contacto-component-table">' + data + '</a>';
                        }
                    },
                	{
                        targets: [0,1,2,7,8],
                        visible: false
                    }
                ]
			});

            // Modal show
            this.ready();
			this.$modalComponent.modal('show');
		},

		setContacto: function(e) {
            
			e.preventDefault();

	        var data = this.contactoSearchTable.row( $(e.currentTarget).parents('tr') ).data();
			this.$inputContent.val( data.id );
			this.$inputName.val( data.tcontacto_nombre );
			if(this.$inputPhone.length) {
                this.$inputPhone.val( data.tcontacto_telefono );
            }
            if(this.$inputAddress.length) {
                this.$inputAddress.val( data.tcontacto_direccion );
            }
            if(this.$inputCity.length) {
                this.$inputCity.val( data.tcontacto_municipio ).trigger('change');
            }
            if(this.$inputEmail.length) {
				this.$inputEmail.val( data.tcontacto_email );
			}

			this.$modalComponent.modal('hide');
		},

		search: function(e) {
           
			e.preventDefault();
            
		    this.contactoSearchTable.ajax.reload();
		},

		clear: function(e) {
           
			e.preventDefault();

            this.$searchContactoNombres.val('');
            this.$searchContactoApellidos.val('');

            this.contactoSearchTable.ajax.reload();
		},

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        }
    });


})(jQuery, this, this.document);

/**
* Class ComponentSearchContratoView of Backbone
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ComponentSearchContratoView = Backbone.View.extend({

      	el: 'body',
        template: _.template( ($('#koi-search-contrato-component-tpl').html() || '') ),

		events: {
            'click .btn-koi-search-contrato-component-table': 'searchOrden',
            'click .btn-search-koi-search-contrato-component': 'search',
            'click .btn-clear-koi-search-contrato-component': 'clear',
            'click .a-koi-search-contrato-component-table': 'setContrato'
		},

        /**
        * Constructor Method
        */
		initialize: function() {
			// Initialize
            this.$modalComponent = this.$('#modal-search-contrato-component');
		},

		searchOrden: function(e) {
            e.preventDefault();
            var _this = this;

            // Render template
            this.$modalComponent.find('.content-modal').html( this.template({ }) );

            // References
            this.$searchContratoNumero = this.$('#koi_search_contrato_numero');

            // Validate tercero
			this.$resourceTercero = this.$("#"+$(e.currentTarget).attr("data-tercero"));
			var tercero = this.$resourceTercero.attr("data-tercero");
            if( _.isUndefined(tercero) || _.isNull(tercero) || tercero == '') {
                alertify.error('Por favor ingrese cliente antes agregar contrato.');
                return;
            }

            this.$contratoSearchTable = this.$modalComponent.find('#koi-search-contrato-component-table');
			this.$inputContent = this.$("#"+$(e.currentTarget).attr("data-field"));
			this.$inputName = this.$("#"+$(e.currentTarget).attr("data-name"));

			this.contratoSearchTable = this.$contratoSearchTable.DataTable({
				dom: "<'row'<'col-sm-12'tr>>" +
					"<'row'<'col-sm-5'i><'col-sm-7'p>>",
				processing: true,
                serverSide: true,
            	language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull( Route.route('contratos.index') ),
                    data: function( data ) {
                        data.contrato_numero = _this.$searchContratoNumero.val(),
                        data.contrato_tercero = tercero
                    }
                },
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'contrato_numero', name: 'contrato_numero' },
                    { data: 'tercero_nombre', name: 'contrato_tercero' },
                    { data: 'contrato_fecha', name: 'contrato_fecha' },
                    { data: 'contrato_vencimiento', name: 'contrato_vencimiento' },
                    { data: 'contrato_activo', name: 'contrato_activo' },
                    { data: 'contrato_condiciones', name: 'contrato_condiciones' }
                ],
                columnDefs: [
                    {
                        targets: 1,
                        width: '40%',
                        searchable: false,
                        render: function ( data, type, full, row ) {
                        	return '<a href="#" class="a-koi-search-contrato-component-table">' + data + '</a>';
                        }
                    },
                	{
                        targets: [0,2,5],
                        visible: false
                    }
                ]
			});

            // Modal show
            this.ready();
			this.$modalComponent.modal('show');
		},

		setContrato: function(e) {
			e.preventDefault();

	        var data = this.contratoSearchTable.row( $(e.currentTarget).parents('tr') ).data();
			this.$inputContent.val( data.id );
			this.$inputName.val( data.contrato_numero );

			this.$modalComponent.modal('hide');
		},

		search: function(e) {
			e.preventDefault();

		    this.contratoSearchTable.ajax.reload();
		},

		clear: function(e) {
			e.preventDefault();

            this.$searchContratoNumero.val('');

            this.contratoSearchTable.ajax.reload();
		},

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        }
    });


})(jQuery, this, this.document);

/**
* Class ComponentSearchProductoView of Backbone
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ComponentSearchProductoView = Backbone.View.extend({

      	el: 'body',
        template: _.template( ($('#koi-search-producto-component-tpl').html() || '') ),

		events: {
			'change input.producto-koi-component': 'productoChanged',
            'click .btn-koi-search-producto-component': 'searchProducto',
            'click .btn-search-koi-search-producto-component': 'search',
            'click .btn-clear-koi-search-producto-component': 'clear',
            'click .a-koi-search-producto-component-table': 'setProducto'
		},

        /**
        * Constructor Method
        */
		initialize: function() {
			// Initialize
            this.$modalComponent = this.$('#modal-search-producto-component');
		},

		searchProducto: function(e) {
            e.preventDefault();
            var _this = this;

            // Render template
            this.$modalComponent.find('.content-modal').html( this.template({ }) );

            // References
            this.$searchSerie = this.$('#koi_search_producto_serie');
            this.$searchNombre = this.$('#koi_search_producto_nombre');

            this.$productosSearchTable = this.$modalComponent.find('#koi-search-producto-component-table');
			this.$inputContent = this.$("#"+$(e.currentTarget).attr("data-field"));
			this.$inputName = this.$("#"+this.$inputContent.attr("data-name"));
			this.$wraperType = this.$("#"+this.$inputContent.attr("data-render"));
			
			// Filters
			this.tipo_codigo = this.$inputContent.attr("data-tipo");
			this.asignacion_data = this.$inputContent.attr("data-asignaciones");
		
			this.productosSearchTable = this.$productosSearchTable.DataTable({
				dom: "<'row'<'col-sm-12'tr>>" +
					"<'row'<'col-sm-5'i><'col-sm-7'p>>",
				processing: true,
                serverSide: true,
            	language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull( Route.route('productos.index') ),
                    data: function( data ) {
                        data.producto_serie = _this.$searchSerie.val();
                        data.producto_nombre = _this.$searchNombre.val();
                        data.tipo_codigo = _this.tipo_codigo;
                        data.productos_asignados = _this.asignacion_data;
                    }
                },
                columns: [
                    { data: 'producto_serie', name: 'producto_serie' },
                    { data: 'producto_nombre', name: 'producto_nombre' },
                    { data: 'tipo_nombre', name: 'producto_tipo' },
                    { data: 'tipo_codigo', name: 'tipo_codigo' }
                ],
                columnDefs: [
					{
						targets: 0,
						width: '10%',
						searchable: false,
						render: function ( data, type, full, row ) {
							return '<a href="#" class="a-koi-search-producto-component-table">' + data + '</a>';
						}
					},
					{
						targets: 3,
						visible: false						
					}
                ]
			});

            // Modal show
            this.ready();
			this.$modalComponent.modal('show');
		},

		setProducto: function(e) {
			e.preventDefault();

	        var data = this.productosSearchTable.row( $(e.currentTarget).parents('tr') ).data();

			this.$inputContent.val( data.producto_serie );
			this.$inputName.val( data.producto_nombre );

		 	if(this.$wraperType.length) {
                this.renderType(data.tipo_codigo);
            }

			this.$modalComponent.modal('hide');
		},

		search: function(e) {
			e.preventDefault();

		    this.productosSearchTable.ajax.reload();
		},

		clear: function(e) {
			e.preventDefault();

            this.$searchSerie.val('');
            this.$searchNombre.val('');

            this.productosSearchTable.ajax.reload();
		},

		productoChanged: function(e) {
			var _this = this;

			this.$inputContent = $(e.currentTarget);
			this.$inputName = this.$("#"+$(e.currentTarget).attr("data-name"));
			this.$wraperConten = this.$("#"+$(e.currentTarget).attr("data-wrapper"));
			this.$wraperType = this.$("#"+this.$inputContent.attr("data-render"));

			var producto = this.$inputContent.val();

            // Before eval clear data
            this.$inputName.val('');

			if(!_.isUndefined(producto) && !_.isNull(producto) && producto != '') {
				// Get Producto
	            $.ajax({
	                url: window.Misc.urlFull(Route.route('productos.search')),
	                type: 'GET',
	                data: { producto_serie: producto },
	                beforeSend: function() {
						_this.$inputName.val('');
	                    window.Misc.setSpinner( _this.$wraperConten );
	                }
	            })
	            .done(function(resp) {
	                window.Misc.removeSpinner( _this.$wraperConten );
	                
	                if(resp.success) {
	                    if(!_.isUndefined(resp.producto_nombre) && !_.isNull(resp.producto_nombre)){
							_this.$inputName.val(resp.producto_nombre);
	                    }

	                    if(_this.$wraperType.length) {
    		            	_this.renderType(resp.tipo_codigo);
	                    }
	                }
	            })
	            .fail(function(jqXHR, ajaxOptions, thrownError) {
	                window.Misc.removeSpinner( _this.$wraperConten );
	                alertify.error(thrownError);
	            });
	     	}
		},


        /**
        * Render form type
        */
        renderType: function (type) {
        	this.$wraperType.empty();

        	var data = { };
        	if( type == 'AC') {
	        	data.producto_tipo = type;
	        	var template = _.template($('#koi-search-producto-type-component-tpl').html());
	           	this.$wraperType.html( template( data ) );
        	}
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        }
    });


})(jQuery, this, this.document);

/**
* Class ComponentSearchTerceroView  of Backbone
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ComponentSearchTerceroView = Backbone.View.extend({

      	el: 'body',
        template: _.template( ($('#koi-search-tercero-component-tpl').html() || '') ),

		events: {
			'change input.tercero-koi-component': 'terceroChanged',
            'click .btn-koi-search-tercero-component-table': 'searchTercero',
            'click .btn-search-koi-search-tercero-component': 'search',
            'click .btn-clear-koi-search-tercero-component': 'clear',
            'click .a-koi-search-tercero-component-table': 'setTercero'
		},

        /**
        * Constructor Method
        */
		initialize: function() {
			// Initialize
            this.$modalComponent = this.$('#modal-search-component');
		},

		searchTercero: function(e) {
            e.preventDefault();
            var _this = this;

            // Render template
            this.$modalComponent.find('.content-modal').html( this.template({ }) );

            // References
            this.$searchNit = this.$('#koi_search_tercero_nit');
            this.$searchName = this.$('#koi_search_tercero_nombre');

            this.$tercerosSearchTable = this.$modalComponent.find('#koi-search-tercero-component-table');
            
            this.$inputContent = this.$("#"+$(e.currentTarget).attr("data-field"));
            this.$inputName = this.$("#"+this.$inputContent.attr("data-name"));
            this.$btnContact = this.$("#"+this.$inputContent.attr("data-contacto"));
            
               
            this.tercerosSearchTable = this.$tercerosSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>>" +
               		"<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),

                ajax: {
                    url: window.Misc.urlFull( Route.route('terceros.index') ),
                    data: function( data ) {
                        data.tercero_nit = _this.$searchNit.val();
                        data.tercero_nombre = _this.$searchName.val();
                    }
                },

                columns: [
                    { data: 'tercero_nit', name: 'tercero_nit' },
                    { data: 'tercero_nombre', name: 'tercero_nombre' },
                    { data: 'tercero_razonsocial', name: 'tercero_razonsocial'},
                    { data: 'tercero_nombre1', name: 'tercero_nombre1' },
                    { data: 'tercero_nombre2', name: 'tercero_nombre2' },
                    { data: 'tercero_apellido1', name: 'tercero_apellido1' },
                    { data: 'tercero_apellido2', name: 'tercero_apellido2' }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '15%',
                        searchable: false,
                        render: function ( data, type, full, row ) {
                        	return '<a href="#" class="a-koi-search-tercero-component-table">' + data + '</a>';
                        }
                    },
                    {
                        targets: 1,
                        width: '85%',
                        searchable: false
                    },
                    {
                        targets: [2, 3, 4, 5, 6],
                        visible: false,
                        searchable: false
                    }
                ]
            });

            // Modal show
            this.ready();
			this.$modalComponent.modal('show');
		},

		setTercero: function(e) {
			e.preventDefault();

	        var data = this.tercerosSearchTable.row( $(e.currentTarget).parents('tr') ).data();

			this.$inputContent.val( data.tercero_nit );
			this.$inputName.val( data.tercero_nombre );

            if(this.$btnContact.length > 0) {
                
                this.$btnContact.attr('data-tercero', data.id);
            }   
          
			this.$modalComponent.modal('hide');
		},

		search: function(e) {
			e.preventDefault();

		    this.tercerosSearchTable.ajax.reload();
		},

		clear: function(e) {
            
			e.preventDefault();

			this.$searchNit.val('');
			this.$searchName.val('');

            this.tercerosSearchTable.ajax.reload();
		},

		terceroChanged: function(e) {
			var _this = this;

            this.$inputContent = $(e.currentTarget);
            this.$inputName = this.$("#"+$(e.currentTarget).attr("data-name"));
            this.$wraperConten = this.$("#"+$(e.currentTarget).attr("data-wrapper"));
            this.$btnContact = this.$("#"+this.$inputContent.attr("data-contacto"));
            if(this.$btnContact.length > 0) {
                
                this.$btnContact.attr('data-tercero', '' );
            }

			var tercero = this.$inputContent.val();

            // Before eval clear data
            this.$inputName.val('');

			if(!_.isUndefined(tercero) && !_.isNull(tercero) && tercero != '') {
				// Get tercero
	            $.ajax({
	                url: window.Misc.urlFull(Route.route('terceros.search')),
	                type: 'GET',
	                data: { tercero_nit: tercero },
	                beforeSend: function() {
						_this.$inputName.val('');
	                    window.Misc.setSpinner( _this.$wraperConten );
	                }
	            })
	            .done(function(resp) {
	                window.Misc.removeSpinner( _this.$wraperConten );
	                if(resp.success) {
	                    if(!_.isUndefined(resp.tercero_nombre) && !_.isNull(resp.tercero_nombre)){
							_this.$inputName.val(resp.tercero_nombre);
	                    }
                        if(_this.$btnContact.length > 0) {
                            _this.$btnContact.attr('data-tercero', resp.id);
                        }
                    }
	            })
	            .fail(function(jqXHR, ajaxOptions, thrownError) {
	                window.Misc.removeSpinner( _this.$wraperConten );
	                alertify.error(thrownError);
	            });

	     	}
		},

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        }
    });


})(jQuery, this, this.document);

/**
* Class ComponentTerceroView  of Backbone
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ComponentTerceroView = Backbone.View.extend({

      	el: 'body',
        templateName: _.template( ($('#tercero-name-tpl').html() || '') ),
		events: {
			'change .change-nit-koi-component': 'nitChanged',
            'change .change-actividad-koi-component': 'actividadChanged'
		},

        /**
        * Constructor Method
        */
		initialize: function() {
			// Initialize
		},

        nitChanged: function(e) {
            var _this = this;

           // Reference to fields
            this.$dv = $("#"+$(e.currentTarget).attr("data-field"));
        	this.$wraperContent = this.$('#tercero-create');
            if(!this.$wraperContent.length) {
	            this.$modalComponent = this.$('#modal-add-resource-component');
	            this.$wraperContent = this.$modalComponent.find('.modal-body');
   			}

            $.ajax({
                url: window.Misc.urlFull(Route.route('terceros.dv')),
                type: 'GET',
                data: { tercero_nit: $(e.currentTarget).val() },
                beforeSend: function() {
                    window.Misc.setSpinner( _this.$wraperContent );
                }
            })
            .done(function(resp) {
                window.Misc.removeSpinner( _this.$wraperContent );
                if(resp.success) {
                    // Dv
                    _this.$dv.val(resp.dv);
                }
            })
            .fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner( _this.$wraperContent );
                alertify.error(thrownError);
            });
        },

        actividadChanged: function(e) {
            var _this = this;

            // Reference to fields
            this.$retecree = $("#"+$(e.currentTarget).attr("data-field"));
            this.$wraperContent = this.$('#tercero-create');
            if(!this.$wraperContent.length) {
                this.$modalComponent = this.$('#modal-add-resource-component');
                this.$wraperContent = this.$modalComponent.find('.modal-body');
            }

            $.ajax({
                url: window.Misc.urlFull(Route.route('terceros.rcree')),
                type: 'GET',
                data: { tercero_actividad: $(e.currentTarget).val() },
                beforeSend: function() {
                    window.Misc.setSpinner( _this.$wraperContent );
                }
            })
            .done(function(resp) {
                window.Misc.removeSpinner( _this.$wraperContent );
                if(resp.success) {
                    // % cree
                    if(!_.isUndefined(resp.rcree) && !_.isNull(resp.rcree)){
                        _this.$retecree.html(resp.rcree);
                    }
                }
            })
            .fail(function(jqXHR, ajaxOptions, thrownError) {
                window.Misc.removeSpinner( _this.$wraperContent );
                alertify.error(thrownError);
            });
        }
    });


})(jQuery, this, this.document);

/**
* Class CreateContadorView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateContadorView = Backbone.View.extend({

        el: '#contador-create',
        template: _.template( ($('#add-contador-tpl').html() || '') ),
        events: {
            'submit #form-contador': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-contador');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('contadores.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainContadoresView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainContadoresView = Backbone.View.extend({

        el: '#contadores-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$contadoresSearchTable = this.$('#contadores-search-table');

            this.$contadoresSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('contadores.index') ),
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'contador_nombre', name: 'contador_nombre' },
                    { data: 'contador_activo', name: 'contador_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-plus"></i> Nuevo contador',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('contadores.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('contadores.show', {contadores: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 2,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class ContactItemView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ContratoItemView = Backbone.View.extend({

        tagName: 'tr',
        template: _.template( ($('#contrato-item-list-tpl').html() || '') ),
        events: {
            'click .btn-edit-contrato': 'editContrato',
        },
        parameters: {
            wrapper: null,
            edit: false,
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize: function(opts){

            //Init Attributes
                 if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

                this.parameters.wrapper

            // Events Listener
            this.listenTo( this.model, 'change', this.render );
        },

        /*
        * Render View Element
        */
        render: function(){

            var attributes = this.model.toJSON();
            attributes.edit = this.parameters.edit;

            this.$el.html( this.template(attributes) );

            return this;
        },


    });

})(jQuery, this, this.document);
/**
* Class ContactsListView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ContratosListView = Backbone.View.extend({

        el: '#browse-contratos-danos-list',
        events: {
            'click .item-contratodano-remove': 'removeOne'
        },
        parameters: {
            wrapper:false,
            edit:false,
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize : function(opts){

            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            this.parameters.wrapper

            // Events Listeners
            this.listenTo( this.collection, 'add', this.addOne );
            this.listenTo( this.collection, 'reset', this.addAll );
            this.listenTo( this.collection, 'store', this.storeOne );
            this.listenTo( this.collection, 'request', this.loadSpinner);
            this.listenTo( this.collection, 'sync', this.responseServer);

           this.collection.fetch({ data: {contrato_id: this.parameters.dataFilter.contrato_id}, reset: true });
        },

        /*
        * Render View Element
        */
        render: function() {

        },

        /**
        * Render view contact by model
        * @param Object contactModel Model instance
        */
        addOne: function (contratodanoModel) {
            var view = new app.ContratoItemView({
                model: contratodanoModel,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            contratodanoModel.view = view;
            this.$el.prepend( view.render().el );

        },

        /**
        * Render all view Marketplace of the collection
        */
        addAll: function () {
            this.collection.forEach( this.addOne, this );
        },

        storeOne: function (data) {
            var _this = this

            // Set Spinner
            window.Misc.setSpinner( this.parameters.wrapper );

            // Prepare data
            data.contratodano_contrato = this.parameters.dataFilter.contrato_id;

            // Add model in collection
            var contratodanoModel = new app.ContratoDanoModel();
            contratodanoModel.save(data, {
                success : function(model, resp) {
                    if(!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner( _this.parameters.wrapper );

                        // response success or error
                        var text = resp.success ? '' : resp.errors;
                        if( _.isObject( resp.errors ) ) {
                            text = window.Misc.parseErrors(resp.errors);
                        }

                        if( !resp.success ) {
                            alertify.error(text);
                            return;
                        }

                        // Add model in collection
                        _this.collection.add(model);
                    }
                },
                error : function(model, error) {
                    window.Misc.removeSpinner( _this.parameters.wrapper );
                    alertify.error(error.statusText)
                }
            });
        },


        /**
        * Event remove item
        */
        removeOne: function (e) {
            e.preventDefault();

            var resource = $(e.currentTarget).attr("data-resource"),
                model = this.collection.get(resource),
                _this = this;

            if ( model instanceof Backbone.Model ) {
                model.destroy({
                    success : function(model, resp) {
                        if(!_.isUndefined(resp.success)) {
                            window.Misc.removeSpinner( _this.parameters.wrapper );

                            if( !resp.success ) {
                                alertify.error(resp.errors);
                                return;
                            }

                            model.view.remove();
                        }
                    }
                });

            }
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function ( target, xhr, opts ) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( target, resp, opts ) {
            window.Misc.removeSpinner( this.el );
        }
   });

})(jQuery, this, this.document);

/**
* Class CreateContratoView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined){

    app.CreateContratoView = Backbone.View.extend({

        el: '#contratos-create',
        template: _.template( ($('#add-contrato-tpl').html() || '') ),
        events: {
            'submit #form-contrato': 'onStore',
            'submit #form-danoc': 'onStoreDano',
        },
        parameters: {
        },

       /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-contrato');

            // Model exist
            if( this.model.id != undefined ) {
                this.contratosList = new app.ContratosList();
             
           }

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );
            this.$form = this.$('#form-contrato');

            // Model exist
            if( this.model.id != undefined ) {

                // Reference views
                this.referenceViews();
            }

            this.ready();
        },

        /**
        * reference to views
        */
        referenceViews: function () {
            // Contratos list
            this.contratosListView = new app.ContratosListView( {
                collection: this.contratosList,
                parameters: {
                    edit: true,
                    wrapper: this.$('#wrapper-danos-contrato'),
                    dataFilter: {
                        'contrato_id': this.model.get('id')
                    }
               }
            });
        },
        
        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );

               
                this.model.save( data, {patch: true, silent: true} );
            }
        },      
        

        /**
        * Event Create Dano
        */
        onStoreDano: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();

                // Prepare global data
                var data = window.Misc.formToJson( e.target );

                this.contratosList.trigger( 'store', data );
            }
        },

        

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();

            if( typeof window.initComponent.initSelect2 == 'function' )
                window.initComponent.initSelect2();

            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();

            if( typeof window.initComponent.initValidator == 'function' )
                window.initComponent.initValidator();

            if( typeof window.initComponent.initDatePicker == 'function' )
                window.initComponent.initDatePicker();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                // ContratoView undelegateEvents
                if ( this.createContratoView instanceof Backbone.View ){
                    this.createContratoView.stopListening();
                    this.createContratoView.undelegateEvents();
                }

                // Redirect to edit contrato
                Backbone.history.navigate(Route.route('contratos.edit', { contratos: resp.id}), { trigger:true });
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainContratosView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainContratosView = Backbone.View.extend({

        el: '#contrato-main',
        events: {
            'click .btn-search': 'search',
            'click .btn-clear': 'clear'
        },

        /**
        * Constructor Method
        */
        initialize : function() {
            var _this = this;

            // References
            this.$contratosSearchTable = this.$('#contrato-search-table');
            this.$searchcontratoContrato = this.$('#searchcontrato_contrato_numero');
            this.$searchcontratoTercero = this.$('#searchcontrato_tercero');
            this.$searchcontratoTerceroName = this.$('#searchcontrato_tercero_nombre');
           
            this.contratosSearchTable = this.$contratosSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull( Route.route('contratos.index') ),
                    data: function( data ) {
                        data.persistent = true;
                        data.contrato_numero = _this.$searchcontratoContrato.val();
                        data.tercero_nit = _this.$searchcontratoTercero.val();
                        data.tercero_nombre = _this.$searchcontratoTerceroName.val();
                    }
                },
                columns: [
                    //{ data: 'id', name: 'id' },
                    { data: 'contrato_numero', name: 'contrato_numero' },
                    { data: 'tercero_nombre', name: 'contrato_tercero' },
                    { data: 'contrato_fecha', name: 'contrato_fecha' },
                    { data: 'contrato_vencimiento', name: 'contrato_vencimiento' },
                    { data: 'contrato_activo', name: 'contrato_activo' }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        searchable: false,
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('contratos.show', {contratos: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 4,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ]
            });
        },

        search: function(e) {
            e.preventDefault();

            this.contratosSearchTable.ajax.reload();
        },

        clear: function(e) {
            e.preventDefault();

            this.$searchcontratoContrato.val('');
            this.$searchcontratoTercero.val('');
            this.$searchcontratoTerceroName.val('');
           
            this.contratosSearchTable.ajax.reload();
        },
    });

})(jQuery, this, this.document);




/**
* Class ShowContratoView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ShowContratoView = Backbone.View.extend({

        el: '#contrato-main',

        /**
        * Constructor Method
        */
        initialize : function() {
            // Model exist
            if( this.model.id != undefined ) {

               this.contratosList = new app.ContratosList();

                // Reference views
                this.referenceViews();
            }
        },

        /**
        * reference to views
        */
        referenceViews: function () {
       	// Contratos list
            this.contratosListView = new app.ContratosListView( {
                collection: this.contratosList,
                parameters: {
                    edit: false,
                    wrapper: this.$('#wrapper-danos-contrato'),
                    dataFilter: {
                        'contrato_id': this.model.get('id')
                    }
               }
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class CreateDanoView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateDanoView = Backbone.View.extend({

        el: '#dano-create',
        template: _.template( ($('#add-dano-tpl').html() || '') ),
        events: {
            'submit #form-dano': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-dano');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('danos.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainDanosView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainDanosView = Backbone.View.extend({

        el: '#danos-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$danosSearchTable = this.$('#danos-search-table');

            this.$danosSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('danos.index') ),
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'dano_nombre', name: 'dano_nombre' },
                    { data: 'dano_activo', name: 'dano_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-plus"></i> Nuevo Daño',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('danos.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('danos.show', {danos: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 2,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class MainDepartamentoView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainDepartamentoView = Backbone.View.extend({
        el: '#departamentos-main',
        /**
        * Constructor Method
        */
        initialize : function() {
            
            this.$departamentosSearchTable = this.$('#departamentos-search-table');

            this.$departamentosSearchTable.DataTable({
				processing: true,
                serverSide: true,
            	language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('departamentos.index') ),
                columns: [
                    { data: 'departamento_codigo', name: 'departamento_codigo' },
                    { data: 'departamento_nombre', name: 'departamento_nombre'}
                ]
			});
        }
    });

})(jQuery, this, this.document);

/**
* Class CreateEstadoView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateEstadoView = Backbone.View.extend({

        el: '#estado-create',
        template: _.template( ($('#add-estado-tpl').html() || '') ),
        events: {
            'submit #form-estado': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-estado');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('estados.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainEstadoView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainEstadosView = Backbone.View.extend({

        el: '#estados-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$estadosSearchTable = this.$('#estados-search-table');

            this.$estadosSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('estados.index') ),
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'estado_nombre', name: 'estado_nombre' },
                    { data: 'estado_activo', name: 'estado_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-plus"></i> Nuevo estado',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('estados.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('estados.show', {estados: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 2,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class AppRouter  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.UserLoginView = Backbone.View.extend({

        el: '#login-box', 

        /**
        * Constructor Method
        */
        initialize : function() {
 			//console.log('initialize UserLoginView');
            //Init Attributes 
            this.$loginForm = $('#form-login-account');
            this.$loginForm.validator();
        },

        /*
        * Render View Element
        */
        render: function(){
            //
        }
    });


})(jQuery, this, this.document);

/**
* Class CreateMarcaView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateMarcaView = Backbone.View.extend({

        el: '#marca-create',
        template: _.template( ($('#add-marca-tpl').html() || '') ),
        events: {
            'submit #form-marca': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-marca');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('marcas.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainMarcasView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainMarcasView = Backbone.View.extend({

        el: '#marcas-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$marcasSearchTable = this.$('#marcas-search-table');

            this.$marcasSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('marcas.index') ),
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'marca_modelo', name: 'marca_modelo' },
                    { data: 'marca_activo', name: 'marca_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-plus"></i> Nueva marca',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('marcas.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('marcas.show', {marcas: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 2,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class CreateModeloView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateModeloView = Backbone.View.extend({

        el: '#modelo-create',
        template: _.template( ($('#add-modelo-tpl').html() || '') ),
        events: {
            'submit #form-modelo': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-modelo');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Modelo
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );
            
            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck(); 

            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('modelos.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainModelosView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainModelosView = Backbone.View.extend({

        el: '#modelos-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$modelosSearchTable = this.$('#modelos-search-table');
            
            this.$modelosSearchTable.DataTable({
				
                dom:"<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
					"<'row'<'col-sm-12'tr>>" +
					"<'row'<'col-sm-5'i><'col-sm-7'p>>",
				processing: true,
                serverSide: true,
            	language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('modelos.index') ),
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'modelo_nombre', name: 'modelo_nombre' },
                    { data: 'modelo_activo', name: 'modelo_activo'}
                ],
				buttons: [
					{
						text: '<i class="fa fa-plus"></i> Nuevo Modelo',
                        className: 'btn-sm',
						action: function ( e, dt, node, config ) {
							window.Misc.redirect( window.Misc.urlFull( Route.route('modelos.create') ) )
						}
					}
				],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('modelos.show', {modelos: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                     {
                        targets: [2],
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        }
                    },
                ]
			});
        }
    });

})(jQuery, this, this.document);

/**
* Class MainMunicipioView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainMunicipioView = Backbone.View.extend({

        el: '#municipios-main',

        /**
        * Constructor Method
        */
        initialize : function() {
            
            this.$municipiosSearchTable = this.$('#municipios-search-table');

            this.$municipiosSearchTable.DataTable({
				processing: true,
                serverSide: true,
            	language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('municipios.index') ),
                columns: [
                    { data: 'departamento_codigo', name: 'departamento.departamento_codigo'},
                    { data: 'departamento_nombre', name: 'departamento_nombre'},
                    { data: 'municipio_codigo', name: 'municipio_codigo' },
                    { data: 'municipio_nombre', name: 'municipio_nombre'},
                    { data: 'departamento_id', name: 'departamento_id'}
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '15%'
                    },
                    {
                        targets: 1,
                        width: '35%'
                    },
                    {
                        targets: 2,
                        width: '15%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('departamentos.show', {departamentos: full.departamento_id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 3,
                        width: '35%'
                    },
                    {
                        targets: 4,
                        visible: false,
                        searchable: false
                    }
                ]
			});
        }
    });

})(jQuery, this, this.document);

/**
* Class ContadoresItem  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ContadoresItemView = Backbone.View.extend({

        tagName: 'tr',
        template: _.template( ($('#contadoresp-item-list-tpl').html() || '') ),
        parameters: {
            edit: false
            
        },

        /**
        * Constructor Method
        */
        initialize: function(opts){
           //Init Attributes
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);
           
            // Events Listener
            this.listenTo( this.model, 'change', this.render );
          
        },

        /*
        * Render View Element
        */
        render: function(){

            var attributes = this.model.toJSON();
          
            attributes.edit = this.parameters.edit;
            this.$el.html( this.template(attributes) );
            return this;
        },


    });

})(jQuery, this, this.document);
/**
* Class ContadorespView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ContadorespView = Backbone.View.extend({

       el: '#browse-orden-contadoresp-list',
        events: {
               'click .item-contadoresp-remove': 'removeOne'
        },
        parameters: {
            wrapper:false,
            edit:false,
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize : function(opts){
            
            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);
            
         
            // Events Listeners
            this.listenTo( this.collection, 'add', this.addOne );
            this.listenTo( this.collection, 'reset', this.addAll );
            this.listenTo( this.collection, 'store', this.storeOne );
            this.listenTo( this.collection, 'request', this.loadSpinner);
            this.listenTo( this.collection, 'sync', this.responseServer);

            this.collection.fetch({ data: {producto_id: this.parameters.dataFilter.producto_id}, reset: true });

        },

        /*
        * Render View Element
        */
        render: function() {

        },

        /**
        * Render view contact by model
        * @param Object contadorespModel Model instance
        */
        addOne: function (contadorespModel) {
            var view = new app.ContadoresItemView({
                model: contadorespModel,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            contadorespModel.view = view;
         
            this.$el.append( view.render().el );
         
        },

        /**
        * Render all view Marketplace of the collection
        */
        addAll: function () {
            
             this.collection.forEach( this.addOne, this );
        },

        storeOne: function (data) {
           var _this = this;

            // Set Spinner
            window.Misc.setSpinner( this.parameters.wrapper );

            // Prepare data
            data.producto_id = this.parameters.dataFilter.producto_id;

            // Add model in collection
            var contadorespModel = new app.ContadorespModel();
            contadorespModel.save(data, {
                success : function(model, resp) {
                    if(!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner( _this.parameters.wrapper );

                        // response success or error
                        var text = resp.success ? '' : resp.errors;
                        if( _.isObject( resp.errors ) ) {
                            text = window.Misc.parseErrors(resp.errors);
                        }

                        if( !resp.success ) {
                            alertify.error(text);
                            return;
                        }

                        // Add model in collection
                        //_this.collection.add(model);
                    }
                },
                error : function(model, error) {
                    window.Misc.removeSpinner( _this.parameters.wrapper );
                    alertify.error(error.statusText)
                }
            });
          
        },


        /**
        * Event remove item
        */
        removeOne: function (e) {
          e.preventDefault();

            var resource = $(e.currentTarget).attr("data-resource"),
                model = this.collection.get(resource),
                _this = this;

            if ( model instanceof Backbone.Model ) {
                model.destroy({
                    success : function(model, resp) {
                        if(!_.isUndefined(resp.success)) {
                            window.Misc.removeSpinner( _this.parameters.wrapper );

                            if( !resp.success ) {
                                alertify.error(resp.errors);
                                return;
                            }

                            model.view.remove();
                        }
                    }
                });

            }
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function ( target, xhr, opts ) {
            window.Misc.setSpinner( this.parameters.wrapper );
        },

        /**
        * response of the server
        */
        responseServer: function ( target, resp, opts ) {
            window.Misc.removeSpinner( this.parameters.wrapper );
        }
   });

})(jQuery, this, this.document);

/**
* Class CreateOrdenView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined){

    app.CreateOrdenView = Backbone.View.extend({

        el: '#ordenes-create',
        template: _.template( ($('#add-orden-tpl').html() || '') ),
        events: {
            'click .submit-orden': 'submitOrden',
            'submit #form-orden': 'onStore',
            'click .submit-visitas': 'submitVisita',
            'submit #form-visitas': 'onStoreVisita',
            'submit #form-contadoresp': 'onStoreContadoresp',
            'submit #form-visitasp': 'onStoreVisitap',
            
        },
        parameters: {
        },

       /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-orden');

            //Model Exists
            if( this.model.id != undefined ) {
                
                this.visita = new app.VisitaCollection();
                this.visitap = new app.VisitapCollection();
                this.contadoresp = new app.ContadorespCollection(); 
            }
            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
             
            this.$wraperForm.html( this.template(attributes) );
            this.$form = this.$('#form-orden');
            this.$formvisitasp = this.$('#form-visitas');
            this.$formcontadoresp = this.$('#form-contadoresp');
            
            // Model exist
            if( this.model.id != undefined ) {

                // Reference views
                this.referenceViews();
            }

            this.ready();
        },

        referenceViews:function(){

            this.visitasView = new app.VisitasView( {
                collection: this.visita,
                parameters: {
                    edit: true,
                    wrapper: this.$('#wrapper-visitas'),
                    dataFilter: {
                        'orden_id': this.model.get('id')
                    }
               }
            });

            this.visitaspView = new app.VisitaspView( {
                collection: this.visitap,
                parameters: {
                    edit: true,
                    wrapper: this.$('#wrapper-visitasp'),
                    dataFilter: {
                        'orden_id': this.model.get('id')
                    }
               }
            });

            this.contadorespView = new app.ContadorespView( {
                collection: this.contadoresp,
                parameters: {
                    edit: true,
                    wrapper: this.$('#wrapper-contadoresp'),
                    dataFilter: {
                        'producto_id': this.model.get('id_p')
                    }
               }
            });
        },
        
        /**
        *Event Click to Button
        */
        submitOrden:function(e){
            this.$form.submit();
        },
        /**
        * Event Create Orden
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {
                
                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },  

        submitVisita:function(e){
            this.$formvisitasp.submit();
            
        },
        /**
        * Event Create visita
        */
        onStoreVisita: function (e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();

                var data = window.Misc.formToJson( e.target );
                data.visita_orden = this.model.get('id');
                
                // Contadores
                data = $.extend({}, data, window.Misc.formToJson( this.$formcontadoresp ));

                // Repuestos
                data.visitap = this.visitap.toJSON();
                
                this.visita.trigger( 'store', data );
            }
        },  

        /**
        * Event Create visitap
        */

        onStoreVisitap: function (e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();

                var data = window.Misc.formToJson( e.target );

                this.visitap.trigger( 'store', data );
            }
        },   

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();

            if( typeof window.initComponent.initSelect2 == 'function' )
                window.initComponent.initSelect2();

            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();

            if( typeof window.initComponent.initValidator == 'function' )
                window.initComponent.initValidator();
            
            if( typeof window.initComponent.initDatePicker == 'function' )
                window.initComponent.initDatePicker();
            
            if( typeof window.initComponent.initTimePicker == 'function' )
                window.initComponent.initTimePicker();

            if( typeof window.initComponent.initInputMask == 'function' )
                window.initComponent.initInputMask();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            
            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                // Redirect to edit orden
                Backbone.history.navigate(Route.route('ordenes.edit', { ordenes: resp.id}), { trigger:true });
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainOrdenesView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainOrdenesView = Backbone.View.extend({

        el: '#orden-main',
        events: {
            'click .btn-search': 'search',
            'click .btn-clear': 'clear'
        },

        /**
        * Constructor Method
        */
        initialize : function() {
            var _this = this;

            // References
            this.$ordenesSearchTable = this.$('#orden-search-table');
            this.$searchordenOrden = this.$('#searchorden_orden_id');
            this.$searchordenTercero = this.$('#searchorden_tercero');
            this.$searchordenTerceroName = this.$('#searchorden_tercero_nombre');
            this.$searchordenEstado = this.$('#searchorden_orden_estado');

            this.ordenesSearchTable = this.$ordenesSearchTable.DataTable({
                dom: "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull( Route.route('ordenes.index') ),
                    data: function( data ) {
                        data.persistent = true;
                        data.id = _this.$searchordenOrden.val();
                        data.tercero_nit = _this.$searchordenTercero.val();
                        data.tercero_nombre = _this.$searchordenTerceroName.val();
                        data.orden_abierta = _this.$searchordenEstado.val();
                    }
                },
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'orden_fecha', name: 'orden_fecha' },
                    { data: 'tercero_nombre', name: 'tercero_nombre' },
                    { data: 'orden_abierta', name: 'orden_abierta' },


                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        searchable: false,
                        render: function ( data, type, full, row ) {
                            
                            return '<a href="'+ window.Misc.urlFull( Route.route('ordenes.show', {ordenes: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 3,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ],
               
            });
        },

        search: function(e) {
            e.preventDefault();

            this.ordenesSearchTable.ajax.reload();
        },

        clear: function(e) {
            e.preventDefault();

            this.$searchordenOrden.val('');
            this.$searchordenTercero.val('');
            this.$searchordenTerceroName.val('');
            this.$searchordenEstado.val('');

            this.ordenesSearchTable.ajax.reload();
        },
    });

})(jQuery, this, this.document);


/**
* Class VisitaItemView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.VisitasItemView = Backbone.View.extend({

        
        tagName: 'tr',
        template: _.template( ($('#visita-item-list-tpl').html() || '') ),
        templateInfo: _.template( ($('#show-info-visita-tpl').html() || '') ),
        events: {
           'click .item-visita-show-info': 'showInfoVisita'
        },
        parameters: {
            edit: false,

        },

        /**
        * Constructor Method
        */
        initialize: function(opts){

            //Init Attributes
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            //this.parameters.wrapper
            this.$modalInfo = $('#modal-visita-show-info-component');
            this.visitap = new app.VisitapCollection();
            this.contadoresp = new app.ContadorespCollection();
            
            // Events Listener
            this.listenTo( this.model, 'change', this.render );
            
            // addAll de visitasp
            this.listenTo( this.visitap, 'reset', this.addAllVisitasp );

            // addAll de contadoresp
            this.listenTo( this.contadoresp, 'reset', this.addAllContadoresp );
        },

        /*
        * Render View Element
        */
        render: function(){
            var attributes = this.model.toJSON();
            attributes.edit = this.parameters.edit;

            this.$el.html( this.template(attributes) );

            return this;
        },

        /*
        * Show detalle visita 
        */

        showInfoVisita: function(){
            var attributes = this.model.toJSON();

            // Render info
            this.$modalInfo.find('.content-modal').empty().html( this.templateInfo( attributes ) );
            this.$wrapperVisitasp = this.$modalInfo.find('#browse-orden-visitasp-show-list');
            this.$wrapperContadoresp = this.$modalInfo.find('#browse-orden-contadoresp-show-list');
    
            //fetch vistas 
            this.visitap.fetch({ reset: true, data: { visitap: this.model.get('id') } });
            this.contadoresp.fetch({ reset: true, data: { contadoresp: this.model.get('id') } });
            // Open modal
           
            this.$modalInfo.modal('show');
        },

        /**
        * Render view task by model
        * @param Object mentoringTaskModel Model instance
        */
        addOneVisitasp: function (VisitapModel) {
            var view = new app.VisitaspItemView({
                model: VisitapModel,
            });

            this.$wrapperVisitasp.append( view.render().el );           
        },

        addOneContadoresp: function (ContadorespModel) {
            var view = new app.ContadoresItemView({
                model: ContadorespModel,
                parameters:{
                    edit:false
                }
            });

            this.$wrapperContadoresp.append( view.render().el );

          
                    
        },

        /**
        * Render all view tast of the collection
        */
        addAllVisitasp: function () {
            this.visitap.forEach( this.addOneVisitasp, this );
        },

        addAllContadoresp: function () {
            this.contadoresp.forEach( this.addOneContadoresp, this );
        },
    });

})(jQuery, this, this.document);
/**
* Class VisitasView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.VisitasView = Backbone.View.extend({

        el: '#browse-visitas-list',
        events: {
               'click .item-visita-remove': 'removeOne'
        },
        parameters: {
            wrapper:false,
            edit:false,
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize : function(opts){

            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            // Events Listeners
            this.listenTo( this.collection, 'add', this.addOne );
            this.listenTo( this.collection, 'reset', this.addAll );
            this.listenTo( this.collection, 'store', this.storeOne );
            this.listenTo( this.collection, 'request', this.loadSpinner);
            this.listenTo( this.collection, 'sync', this.responseServer);

            this.collection.fetch({ data: {orden_id: this.parameters.dataFilter.orden_id}, reset: true });
           
        },

        /*
        * Render View Element
        */
        render: function() {

        },

        /**
        * Render view contact by model
        * @param Object contactModel Model instance
        */
        addOne: function (visitaModel) {
            
            var view = new app.VisitasItemView({
                model: visitaModel,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            visitaModel.view = view;
            
            this.$el.prepend( view.render().el );
        },

        /**
        * Render all view Marketplace of the collection
        */
        addAll: function () {
            
             this.collection.forEach( this.addOne, this );
        },

        storeOne: function (data) {
            var _this = this;

            // Set Spinner
            window.Misc.setSpinner( this.parameters.wrapper );

            // Prepare data
            data.visita_orden = this.parameters.dataFilter.orden_id;

            // Add model in collection
            var visitaModel = new app.VisitaModel();
            visitaModel.save(data, {
                success : function(model, resp) {
                    if(!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner( _this.parameters.wrapper );

                        // response success or error
                        var text = resp.success ? '' : resp.errors;
                        if( _.isObject( resp.errors ) ) {
                            text = window.Misc.parseErrors(resp.errors);
                        }

                        if( !resp.success ) {
                            alertify.error(text);
                            return;
                        }

                        // Add model in collection
                        _this.collection.add(model);
                    }
                },
                error : function(model, error) {
                    window.Misc.removeSpinner( _this.parameters.wrapper );
                    alertify.error(error.statusText)
                }
            });
        },


        /**
        * Event remove item
        */
        removeOne: function (e) {
          e.preventDefault();

            var resource = $(e.currentTarget).attr("data-resource"),
                model = this.collection.get(resource),
                _this = this;

            if ( model instanceof Backbone.Model ) {
                model.destroy({
                    success : function(model, resp) {
                        if(!_.isUndefined(resp.success)) {
                            window.Misc.removeSpinner( _this.parameters.wrapper );

                            if( !resp.success ) {
                                alertify.error(resp.errors);
                                return;
                            }

                            model.view.remove();
                        }
                    }
                });

            }
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function ( target, xhr, opts ) {
            window.Misc.setSpinner( this.parameters.wrapper );
        },

        /**
        * response of the server
        */
        responseServer: function ( target, resp, opts ) {
            window.Misc.removeSpinner( this.parameters.wrapper );
        }
   });

})(jQuery, this, this.document);

/**
* Class VisitapItemView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.VisitaspItemView = Backbone.View.extend({

        tagName: 'tr',
        template: _.template( ($('#visitap-item-list-tpl').html() || '') ),
        events: {
        },
        parameters: {
            wrapper: null,
            edit: false,
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize: function(opts){

            //Init Attributes
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            //Init Attributes
            this.$modalInfo = $('#modal-visita-show-info-component');
            

            this.parameters.wrapper

            // Events Listener
            this.listenTo( this.model, 'change', this.render );
        },

        /*
        * Render View Element
        */
        render: function(){
            var attributes = this.model.toJSON();
            attributes.edit = this.parameters.edit;
            this.$el.html( this.template(attributes) );
            return this;
        },
    });

})(jQuery, this, this.document);
/**
* Class VisitasView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.VisitaspView = Backbone.View.extend({

        el: '#browse-orden-visitasp-list',
        events: {
               'click .item-visitap-remove': 'removeOne'
        },
        parameters: {
            wrapper:false,
            edit:false,
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize : function(opts){

            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            // Events Listeners
            this.listenTo( this.collection, 'add', this.addOne );
            this.listenTo( this.collection, 'reset', this.addAll );
            this.listenTo( this.collection, 'store', this.storeOne );
            this.listenTo( this.collection, 'request', this.loadSpinner);
            this.listenTo( this.collection, 'sync', this.responseServer);
        },

        /*
        * Render View Element
        */
        render: function() {

        },

        /**
        * Render view contact by model
        * @param Object contactModel Model instance
        */
        addOne: function (visitapModel) {
            
            var view = new app.VisitaspItemView({
                model: visitapModel,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            visitapModel.view = view;
            
            this.$el.prepend( view.render().el );
        },

        /**
        * Render all view Marketplace of the collection
        */
        addAll: function () {
            
             this.collection.forEach( this.addOne, this );
        },

        storeOne: function (data) {
            var _this = this;

            // Set Spinner
            window.Misc.setSpinner( this.parameters.wrapper );

            // Prepare data
            data.visitap_orden = this.parameters.dataFilter.orden_id;

            // Add model in collection
            var visitapModel = new app.VisitapModel();
            visitapModel.save(data, {
                success : function(model, resp) {
                    if(!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner( _this.parameters.wrapper );

                        // response success or error
                        var text = resp.success ? '' : resp.errors;
                        if( _.isObject( resp.errors ) ) {
                            text = window.Misc.parseErrors(resp.errors);
                        }

                        if( !resp.success ) {
                            alertify.error(text);
                            return;
                        }

                        // Add model in collection
                        _this.collection.add(model);
                    }
                },
                error : function(model, error) {
                    window.Misc.removeSpinner( _this.parameters.wrapper );
                    alertify.error(error.statusText)
                }
            });
        },


        /**
        * Event remove item
        */
        removeOne: function (e) {
          e.preventDefault();

            var resource = $(e.currentTarget).attr("data-resource"),
                model = this.collection.get(resource),
                _this = this;

            if ( model instanceof Backbone.Model ) {
                model.destroy({
                    success : function(model, resp) {
                        if(!_.isUndefined(resp.success)) {
                            window.Misc.removeSpinner( _this.parameters.wrapper );

                            if( !resp.success ) {
                                alertify.error(resp.errors);
                                return;
                            }

                            model.view.remove();
                        }
                    }
                });

            }
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function ( target, xhr, opts ) {
            window.Misc.setSpinner( this.parameters.wrapper );
        },

        /**
        * response of the server
        */
        responseServer: function ( target, resp, opts ) {
            window.Misc.removeSpinner( this.parameters.wrapper );
        }
   });

})(jQuery, this, this.document);

/**
* Class CreatePrioridadView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreatePrioridadView = Backbone.View.extend({

        el: '#prioridad-create',
        template: _.template( ($('#add-prioridad-tpl').html() || '') ),
        events: {
            'submit #form-prioridad': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-prioridad');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('prioridades.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainPrioridadesView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainPrioridadesView = Backbone.View.extend({

        el: '#prioridades-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$prioridadesSearchTable = this.$('#prioridades-search-table');

            this.$prioridadesSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('prioridades.index') ),
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'prioridad_nombre', name: 'prioridad_nombre' },
                    { data: 'prioridad_activo', name: 'prioridad_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-plus"></i> Nueva prioridad',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('prioridades.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('prioridades.show', {prioridades: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 2,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class CreateProductoView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateProductoView = Backbone.View.extend({

        el: '#producto-create',
        template: _.template( ($('#add-producto-tpl').html() || '') ),
        events: {
            'click .submit-producto': 'submitProducto',
            'submit #form-producto': 'onStore',
            'submit #form-item-sirvea': 'onStoreItem',
            'submit #form-item-productocontador': 'onStorePcontador'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-producto');

             // Model exist
            if( this.model.id != undefined ) {
                this.sirveasList = new app.SirveasList();
                this.productoscontadorList = new app.ProductosContadorList();
            }

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );
            this.$form = this.$('#form-producto');

            // Model exist
            if( this.model.id != undefined ) {

                // Reference views
                this.referenceViews();
            }

            this.ready();
        },

        /**
        * reference to views
        */
        referenceViews: function () {

            if (this.model.get('tipo_codigo') != 'EQ') 
            {

                //Sirvea list
                this.sirveasListView = new app.SirveasListView( {
                    collection: this.sirveasList,
                    parameters: {
                        edit: true,
                        wrapper: this.$('#wrapper-producto-sirveas'),
                        dataFilter: {
                            'producto_id': this.model.get('id')
                        }
                   }
                });

            }else{

                //ProductoContador list
                this.productoscontadorListView = new app.ProductosContadorListView( {
                    collection: this.productoscontadorList,
                    parameters: {
                        edit: true,
                        wrapper: this.$('#wrapper-producto-productoscontador'),
                        dataFilter: {
                            'producto_id': this.model.get('id')
                        }
                   }
                });
            }
        },

        /**
        * Event submit producto
        */
        submitProducto: function (e) {
            this.$form.submit();
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /**
        * Event add item detalle traslado
        */
        onStoreItem: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();

                // Prepare global data
                var data = window.Misc.formToJson( e.target );
                this.sirveasList.trigger( 'store', data );
            }
        },

        /**
        * Event add productoitem detalle traslado
        */
        onStorePcontador: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();

                // Prepare global data
                var data = window.Misc.formToJson( e.target );
                this.productoscontadorList.trigger( 'store', data );
            }
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();

            if( typeof window.initComponent.initSelect2 == 'function' )
                window.initComponent.initSelect2();

            if( typeof window.initComponent.initValidator == 'function' )
                window.initComponent.initValidator();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                // ProductoView undelegateEvents
                if ( this.createProductoView instanceof Backbone.View ){
                    this.createProductoView.stopListening();
                    this.createProductoView.undelegateEvents();
                }

                // Redirect to edit producto
                Backbone.history.loadUrl(Route.route('productos.edit', { productos: resp.id}), { trigger:true });
            
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainProductosView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainProductosView = Backbone.View.extend({

        el: '#productos-main',
        events: {
            'click .btn-search': 'search',
            'click .btn-clear': 'clear'
        },

        /**
        * Constructor Method
        */
        initialize : function() {
            var _this = this;

            // Rerefences
            this.$productosSearchTable = this.$('#productos-search-table');
            this.$searchSerie = this.$('#producto_serie');
            this.$searchName = this.$('#producto_nombre');

            this.productosSearchTable = this.$productosSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'><'col-sm-4 text-center'l>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull( Route.route('productos.index') ),
                    data: function( data ) {
                        data.persistent = true;
                        data.producto_serie = _this.$searchSerie.val();
                        data.producto_nombre = _this.$searchName.val();
                    }
                },
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'producto_serie', name: 'producto_serie' },
                    { data: 'producto_nombre', name: 'producto_nombre'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-user-plus"></i> Nuevo producto',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('productos.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('productos.show', {productos: full.id }) )  +'">' + data + '</a>';
                        }
                    }
                ]
            });
        },

        search: function(e) {
            e.preventDefault();

            this.productosSearchTable.ajax.reload();
        },

        clear: function(e) {
            e.preventDefault();

            this.$searchSerie.val('');
            this.$searchName.val('');

            this.productosSearchTable.ajax.reload();
        },
    });

})(jQuery, this, this.document);

/**
* Class ProductoContadorItemView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ProductoContadorItemView = Backbone.View.extend({

        tagName: 'tr',
        template: _.template( ($('#add-productocontador-item-tpl').html() || '') ),
        parameters: {
            edit: false
        },

        /**
        * Constructor Method
        */
        initialize: function(opts){
	        // Extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            // Events Listener
            this.listenTo( this.model, 'change', this.render );
        },

        /*
        * Render View Element
        */
        render: function(){

            var attributes = this.model.toJSON();
            attributes.edit = this.parameters.edit;
            this.$el.html( this.template(attributes) );
            return this;
        }
    });

})(jQuery, this, this.document);
/**
* Class ProductosContadorListView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ProductosContadorListView = Backbone.View.extend({

        el: '#browse-productoscontador-producto-list',
        events: {
            'click .item-productocontador-remove': 'removeOne'
        },
        parameters: {
        	wrapper: null,
            edit: false,
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize : function(opts){

            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            this.parameters.wrapper

            // Events Listeners
            this.listenTo( this.collection, 'add', this.addOne );
            this.listenTo( this.collection, 'reset', this.addAll );
            this.listenTo( this.collection, 'request', this.loadSpinner);
            this.listenTo( this.collection, 'store', this.storeOne );
            this.listenTo( this.collection, 'sync', this.responseServer);

            this.collection.fetch({ data: {producto_id: this.parameters.dataFilter.producto_id}, reset: true });
        },

        /*
        * Render View Element
        */
        render: function() {

        },

        /**
        * Render view contact by model
        * @param Object productocontadorModel Model instance
        */
        addOne: function (productocontadorModel) {
            var view = new app.ProductoContadorItemView({
                model: productocontadorModel,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            productocontadorModel.view = view;
            this.$el.prepend( view.render().el );

        },

        /**
        * Render all view Marketplace of the collection
        */
        addAll: function () {
            this.collection.forEach( this.addOne, this );
        },

        /**
        * storescuenta
        * @param form element
        */
        storeOne: function (data) {
            var _this = this

            // Set Spinner
            window.Misc.setSpinner( this.parameters.wrapper );
            
            // Prepare data
            data.productocontador_producto = this.parameters.dataFilter.producto_id;

            // Add model in collection
            var productocontadorModel = new app.ProductoContadorModel();
            productocontadorModel.save(data, {
                success : function(model, resp) {
                    if(!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner( _this.parameters.wrapper );

                        // response success or error
                        var text = resp.success ? '' : resp.errors;
                        if( _.isObject( resp.errors ) ) {
                            text = window.Misc.parseErrors(resp.errors);
                        }

                        if( !resp.success ) {
                            alertify.error(text);
                            return;
                        }

                        // Add model in collection
                        _this.collection.add(model);
                    }
                },
                error : function(model, error) {
                    window.Misc.removeSpinner( _this.parameters.wrapper );
                    alertify.error(error.statusText)
                }
            });
        },

                /**
        * Event remove item
        */
        removeOne: function (e) {
            e.preventDefault();

            var resource = $(e.currentTarget).attr("data-resource"),
                model = this.collection.get(resource),
                _this = this;

            if ( model instanceof Backbone.Model ) {
                model.destroy({
                    success : function(model, resp) {
                        if(!_.isUndefined(resp.success)) {
                            window.Misc.removeSpinner( _this.parameters.wrapper );

                            if( !resp.success ) {
                                alertify.error(resp.errors);
                                return;
                            }

                            model.view.remove();
                        }
                    }
                });

            }
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function ( target, xhr, opts ) {
            window.Misc.setSpinner( this.parameters.wrapper );
        },

        /**
        * response of the server
        */
        responseServer: function ( target, resp, opts ) {
            window.Misc.removeSpinner( this.parameters.wrapper );
        }
   });

})(jQuery, this, this.document);

/**
* Class ShowProductopView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ShowProductoView = Backbone.View.extend({

        el: '#productos-main',

        /**
        * Constructor Method
        */
        initialize : function() {
            // Model exist
            if( this.model.id != undefined ) {

                this.sirveasList = new app.SirveasList();
                this.productoscontadorList = new app.ProductosContadorList();

                // Reference views
                this.referenceViews();
            }
        },

        /**
        * reference to views
        */
        referenceViews: function () {
       		// Sirveas list
            this.sirveasListView = new app.SirveasListView( {
                collection: this.sirveasList,
                parameters: {
                    edit: false,
                    wrapper: this.$('#wrapper-producto-sirveas'),
                    dataFilter: {
                        'producto_id': this.model.get('id')
                    }
               }
            });

            // ProductosContador list
            this.productoscontadorListView = new app.ProductosContadorListView( {
                collection: this.productoscontadorList,
                parameters: {
                    edit: false,
                    wrapper: this.$('#wrapper-producto-productoscontador'),
                    dataFilter: {
                        'producto_id': this.model.get('id')
                    }
               }
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class SirveaItemView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.SirveaItemView = Backbone.View.extend({

        tagName: 'tr',
        template: _.template( ($('#add-sirvea-item-tpl').html() || '') ),
        parameters: {
            edit: false
        },

        /**
        * Constructor Method
        */
        initialize: function(opts){
	        // Extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);
           
            // Events Listener
            this.listenTo( this.model, 'change', this.render );
        },

        /*
        * Render View Element
        */
        render: function(){

            var attributes = this.model.toJSON();
            attributes.edit = this.parameters.edit;
            this.$el.html( this.template(attributes) );
            return this;
        }
    });

})(jQuery, this, this.document);
/**
* Class SirveasListView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.SirveasListView = Backbone.View.extend({

        el: '#browse-sirveas-producto-list',
        events: {
            'click .item-sirvea-remove': 'removeOne'
        },
        parameters: {
        	wrapper: false,
            edit: false,
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize : function(opts){

            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            this.parameters.wrapper;

            // Events Listeners
            this.listenTo( this.collection, 'add', this.addOne );
            this.listenTo( this.collection, 'reset', this.addAll );
            this.listenTo( this.collection, 'request', this.loadSpinner);
            this.listenTo( this.collection, 'store', this.storeOne );
            this.listenTo( this.collection, 'sync', this.responseServer);

            this.collection.fetch({ data: {producto_id: this.parameters.dataFilter.producto_id}, reset: true });
        },

        /*
        * Render View Element
        */
        render: function() {

        },

        /**
        * Render view contact by model
        * @param Object sirveaModel Model instance
        */
        addOne: function (sirveaModel) {
            var view = new app.SirveaItemView({
                model: sirveaModel,
                parameters: {
                    edit: this.parameters.edit
                }
            });
            sirveaModel.view = view;
            
           this.$el.prepend( view.render().el );

        
            

        },

        /**
        * Render all view Marketplace of the collection
        */
        addAll: function () {
            this.collection.forEach( this.addOne, this );
        },

        /**
        * storescuenta
        * @param form element
        */
        storeOne: function (data) {
            var _this = this

            // Set Spinner
            window.Misc.setSpinner( this.parameters.wrapper );
            
            // Prepare data
            data.sirvea_maquina = this.parameters.dataFilter.producto_id;

            // Add model in collection
            var sirveaModel = new app.SirveaModel();
            sirveaModel.save(data, {
                success : function(model, resp) {
                    if(!_.isUndefined(resp.success)) {
                        window.Misc.removeSpinner( _this.parameters.wrapper );

                        // response success or error
                        var text = resp.success ? '' : resp.errors;
                        if( _.isObject( resp.errors ) ) {
                            text = window.Misc.parseErrors(resp.errors);
                        }

                        if( !resp.success ) {
                            alertify.error(text);
                            return;
                        }

                        // Add model in collection
                        _this.collection.add(model);
                    }
                },
                error : function(model, error) {
                    window.Misc.removeSpinner( _this.parameters.wrapper );
                    alertify.error(error.statusText)
                }
            });
        },

                /**
        * Event remove item
        */
        removeOne: function (e) {
            e.preventDefault();

            var resource = $(e.currentTarget).attr("data-resource"),
                model = this.collection.get(resource),
                _this = this;

            if ( model instanceof Backbone.Model ) {
                model.destroy({
                    success : function(model, resp) {
                        if(!_.isUndefined(resp.success)) {
                            window.Misc.removeSpinner( _this.parameters.wrapper );

                            if( !resp.success ) {
                                alertify.error(resp.errors);
                                return;
                            }

                            model.view.remove();
                        }
                    }
                });

            }
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function ( target, xhr, opts ) {
            window.Misc.setSpinner( this.parameters.wrapper );
        },

        /**
        * response of the server
        */
        responseServer: function ( target, resp, opts ) {
            window.Misc.removeSpinner( this.parameters.wrapper );
        }
   });

})(jQuery, this, this.document);

/**
* Class CreateSolicitanteView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateSolicitanteView = Backbone.View.extend({

        el: '#solicitante-create',
        template: _.template( ($('#add-solicitante-tpl').html() || '') ),
        events: {
            'submit #form-solicitante': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-solicitante');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('solicitantes.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainSolicitantesView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainSolicitantesView = Backbone.View.extend({

        el: '#solicitantes-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$solicitantesSearchTable = this.$('#solicitantes-search-table');

            this.$solicitantesSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('solicitantes.index') ),
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'solicitante_nombre', name: 'solicitante_nombre' },
                    { data: 'solicitante_activo', name: 'solicitante_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-plus"></i> Nueva solicitud',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('solicitantes.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('solicitantes.show', {solicitantes: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 2,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class CreateSucursalView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateSucursalView = Backbone.View.extend({

        el: '#sucursales-create',
        template: _.template( ($('#add-sucursal-tpl').html() || '') ),
        events: {
            'submit #form-sucursales': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-sucursal');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('sucursales.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainSucursalesView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainSucursalesView = Backbone.View.extend({

        el: '#sucursales-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$sucursalesSearchTable = this.$('#sucursales-search-table');

            this.$sucursalesSearchTable.DataTable({
				dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
					"<'row'<'col-sm-12'tr>>" +
					"<'row'<'col-sm-5'i><'col-sm-7'p>>",
				processing: true,
                serverSide: true,
            	language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('sucursales.index') ),
                columns: [
                    { data: 'sucursal_nombre', name: 'sucursal_nombre' },
                    { data: 'sucursal_direccion', name: 'sucursal_direccion' }
                ],
				buttons: [
					{
						text: '<i class="fa fa-user-plus"></i> Nueva sucursal',
                        className: 'btn-sm',
						action: function ( e, dt, node, config ) {
							window.Misc.redirect( window.Misc.urlFull( Route.route('sucursales.create') ) )
						}
					}
				],
                columnDefs: [
                    {
                        targets: 0,
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('sucursales.show', {sucursales: full.id }) )  +'">' + data + '</a>';
                        }
                    }
                ]
			});
        }
    });

})(jQuery, this, this.document);

/**
* Class ContactItemView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ContactItemView = Backbone.View.extend({

        tagName: 'tr',
        template: _.template( ($('#contact-item-list-tpl').html() || '') ),
        events: {
            'click .btn-edit-tcontacto': 'editContacto',
        },

        /**
        * Constructor Method
        */
        initialize: function(){

            //Init Attributes

            // Events Listener
            this.listenTo( this.model, 'change', this.render );
        },

        /*
        * Render View Element
        */
        render: function(){

            var attributes = this.model.toJSON();
            this.$el.html( this.template(attributes) );

            return this;
        },

        editContacto: function() {
            var view = new app.CreateTContactoView({
                model: this.model
            });

            view.render();
        }

    });

})(jQuery, this, this.document);
/**
* Class ContactsListView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ContactsListView = Backbone.View.extend({

        el: '#browse-contact-list',
        events: {
            //
        },
        parameters: {
            dataFilter: {}
        },

        /**
        * Constructor Method
        */
        initialize : function(opts){

            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            // Events Listeners
            this.listenTo( this.collection, 'add', this.addOne );
            this.listenTo( this.collection, 'reset', this.addAll );
            this.listenTo( this.collection, 'request', this.loadSpinner);
            this.listenTo( this.collection, 'sync', this.responseServer);

            this.collection.fetch({ data: {tercero_id: this.parameters.dataFilter.tercero_id}, reset: true });
        },

        /*
        * Render View Element
        */
        render: function() {

        },

        /**
        * Render view contact by model
        * @param Object contactModel Model instance
        */
        addOne: function (contactModel) {
            var view = new app.ContactItemView( { model: contactModel } );
            this.$el.append( view.render().el );
        },

        /**
        * Render all view Marketplace of the collection
        */
        addAll: function () {
            this.collection.forEach( this.addOne, this );
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function ( target, xhr, opts ) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( target, resp, opts ) {
            window.Misc.removeSpinner( this.el );
        }
   });

})(jQuery, this, this.document);

/**
* Class CreateTerceroView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateTerceroView = Backbone.View.extend({

        el: '#tercero-create',
        template: _.template( ($('#add-tercero-tpl').html() || '') ),
        events: {
            'submit #form-create-tercero': 'onStore',
            'click .btn-add-tcontacto': 'addContacto',
            'ifChanged .click-check' : 'clickcheck'   
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {

            // Attributes
            this.msgSuccess = 'Tercero guardado con exito!';
            this.$wraperForm = this.$('#render-form-tercero');

            // Events
            // this.listenTo( this.model, 'change:id', this.render );
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /*
        * Render View Element
        */
        render: function(){
            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );
            this.$checkEmpleado = $('#tercero_empleado');
           
            // Model exist
            if( this.model.id != undefined ) {

                this.contactsList = new app.ContactsList();

                // Reference views
                this.referenceViews();
            }
            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();

            if( typeof window.initComponent.initInputMask == 'function' )
                window.initComponent.initInputMask();

            if( typeof window.initComponent.initSelect2 == 'function' )
                window.initComponent.initSelect2();

            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
        },

        /**
        * reference to views
        */
        referenceViews: function () {
            // Contact list
            this.contactsListView = new app.ContactsListView( {
                collection: this.contactsList,
                parameters: {
                    dataFilter: {
                        'tercero_id': this.model.get('id')
                    }
               }
            });
        },

        /**
        * Event Create Forum Post
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },
        
        /**
        * addContacto
        */

        addContacto: function() {
            this.contactoModel = new app.ContactoModel();
            this.createTContactoView = new app.CreateTContactoView({
                model: this.contactoModel,
                collection: this.contactsList,
                parameters: {
                    'tercero_id': this.model.get('id')
               }
            });
            this.createTContactoView.render();
        },

        /*
        *
        */
        clickcheck:function(e){
            var selected = $(e.target).is(':checked');
            if (selected) {
                console.log('checked'); 
            }else{
                console.log('NO checked'); 
            }
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                // CreateTerceroView undelegateEvents
                if ( this.createTerceroView instanceof Backbone.View ){
                    this.createTerceroView.stopListening();
                    this.createTerceroView.undelegateEvents();
                }

                // Redirect to edit orden
                Backbone.history.navigate(Route.route('terceros.edit', { terceros: resp.id}), { trigger:true });
            }
        }
    });

})(jQuery, this, this.document);
/**
* Class CreateTContactoView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateTContactoView = Backbone.View.extend({

        el: 'body',
        template: _.template( ($('#add-contacto-tpl').html() || '') ),
        events: {
            'submit #form-tcontacto-component': 'onStore'
        },
        parameters: {
        	tercero_id : null
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // extends parameters
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({},this.parameters, opts.parameters);

            // Events
            this.listenTo( this.model, 'change:id', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /*
        * Render View Element
        */
        render: function(){
            // Attributes
            this.$modalComponent = this.$('#modal-tcontacto-component');

            var attributes = this.model.toJSON();
            this.$modalComponent.find('.content-modal').html('').html( this.template( attributes ) );
            this.$wraperContent = this.$('#content-tcontacto-component').find('.modal-body');

            // to fire plugins
            this.ready();

            this.$modalComponent.modal('show');
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();

            if( typeof window.initComponent.initInputMask == 'function' )
                window.initComponent.initInputMask();

            if( typeof window.initComponent.initSelect2 == 'function' )
                window.initComponent.initSelect2();
        },

        /**
        * Event Create Contact
        */
        onStore: function (e) {
            if (!e.isDefaultPrevented()) {

                e.preventDefault();

                var data = window.Misc.formToJson( e.target );
				if( !_.isUndefined(this.parameters.tercero_id) && !_.isNull(this.parameters.tercero_id) && this.parameters.tercero_id != '') {
                	data.tcontacto_tercero = this.parameters.tercero_id;
                }
                this.model.save( data, {patch: true} );
            }
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.$wraperContent );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.$wraperContent );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                if(this.collection instanceof Backbone.Collection) {
	                // Add model in collection
	            	this.collection.add(model);
	            }

            	this.$modalComponent.modal('hide');
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainTerceroView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainTerceroView = Backbone.View.extend({

        el: '#terceros-main',
        events: {
            'click .btn-search': 'search',
            'click .btn-clear': 'clear'
        },

        /**
        * Constructor Method
        */
        initialize : function() {
            var _this = this;

            // Rerefences
            this.$tercerosSearchTable = this.$('#terceros-search-table');
            this.$searchNit = this.$('#tercero_nit');
            this.$searchName = this.$('#tercero_nombre');

            this.tercerosSearchTable = this.$tercerosSearchTable.DataTable({
				dom: "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
				processing: true,
                serverSide: true,
            	language: window.Misc.dataTableES(),
                ajax: {
                    url: window.Misc.urlFull( Route.route('terceros.index') ),
                    data: function( data ) {
                        data.persistent = true;
                        data.tercero_nit = _this.$searchNit.val();
                        data.tercero_nombre = _this.$searchName.val();
                    }
                },
                columns: [
                    { data: 'tercero_nit', name: 'tercero_nit' },
                    { data: 'tercero_nombre', name: 'tercero_nombre' },
                    { data: 'tercero_razonsocial', name: 'tercero_razonsocial'},
                    { data: 'tercero_nombre1', name: 'tercero_nombre1' },
                    { data: 'tercero_nombre2', name: 'tercero_nombre2' },
                    { data: 'tercero_apellido1', name: 'tercero_apellido1' },
                    { data: 'tercero_apellido2', name: 'tercero_apellido2' }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '15%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('terceros.show', {terceros: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 1,
                        width: '85%',
                        searchable: false
                    },
                    {
                        targets: [2, 3, 4, 5, 6],
                        visible: false
                    }
                ]
			});
        },

        search: function(e) {
            e.preventDefault();

            this.tercerosSearchTable.ajax.reload();
        },

        clear: function(e) {
            e.preventDefault();

            this.$searchNit.val('');
            this.$searchName.val('');

            this.tercerosSearchTable.ajax.reload();
        },
    });

})(jQuery, this, this.document);

/**
* Class ShowTerceroView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.ShowTerceroView = Backbone.View.extend({

        el: '#terceros-main',

        /**
        * Constructor Method
        */
        initialize : function() {
            // Model exist
            if( this.model.id != undefined ) {

                this.contactsList = new app.ContactsList();
                
                // Reference views
                this.referenceViews();
            }
        },

        /**
        * reference to views
        */
        referenceViews: function () {
            // Contact list
            this.contactsListView = new app.ContactsListView( {
                collection: this.contactsList,
                parameters: {
                    dataFilter: {
                        'tercero_id': this.model.get('id')
                    }
               }
            });

        }
    });

})(jQuery, this, this.document);

/**
* Class CreateTiposView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateTipoView = Backbone.View.extend({

        el: '#tipo-create',
        template: _.template( ($('#add-tipo-tpl').html() || '') ),
        events: {
            'submit #form-tipo': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-tipo');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('tipos.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainTiposView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainTiposView = Backbone.View.extend({

        el: '#tipos-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$tiposSearchTable = this.$('#tipos-search-table');

            this.$tiposSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('tipos.index') ),
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'tipo_codigo', name: 'tipo_codigo' },
                    { data: 'tipo_nombre', name: 'tipo_nombre' },
                    { data: 'tipo_activo', name: 'tipo_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-plus"></i> Nuevo tipo',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('tipos.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('tipos.show', {tipos: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 3,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class CreateTipoOrdenView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateTipoOrdenView = Backbone.View.extend({

        el: '#tipoorden-create',
        template: _.template( ($('#add-tipoorden-tpl').html() || '') ),
        events: {
            'submit #form-tipoorden': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-tipoorden');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('tiposorden.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainTiposOrdenView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainTiposOrdenView = Backbone.View.extend({

        el: '#tiposorden-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$tiposordenSearchTable = this.$('#tiposorden-search-table');

            this.$tiposordenSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('tiposorden.index') ),
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'tipoorden_nombre', name: 'tipoorden_nombre' },
                    { data: 'tipoorden_activo', name: 'tipoorden_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-plus"></i> Nuevo Tipo',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('tiposorden.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('tiposorden.show', {tiposorden: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 2,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);

/**
* Class CreateZonaView  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.CreateZonaView = Backbone.View.extend({

        el: '#zona-create',
        template: _.template( ($('#add-zona-tpl').html() || '') ),
        events: {
            'submit #form-zona': 'onStore'
        },
        parameters: {
        },

        /**
        * Constructor Method
        */
        initialize : function(opts) {
            // Initialize
            if( opts !== undefined && _.isObject(opts.parameters) )
                this.parameters = $.extend({}, this.parameters, opts.parameters);

            // Attributes
            this.$wraperForm = this.$('#render-form-zona');

            // Events
            this.listenTo( this.model, 'change', this.render );
            this.listenTo( this.model, 'sync', this.responseServer );
            this.listenTo( this.model, 'request', this.loadSpinner );
        },

        /**
        * Event Create Folder
        */
        onStore: function (e) {

            if (!e.isDefaultPrevented()) {

                e.preventDefault();
                var data = window.Misc.formToJson( e.target );
                this.model.save( data, {patch: true, silent: true} );
            }
        },

        /*
        * Render View Element
        */
        render: function() {

            var attributes = this.model.toJSON();
            this.$wraperForm.html( this.template(attributes) );

            this.ready();
        },

        /**
        * fires libraries js
        */
        ready: function () {
            // to fire plugins
            if( typeof window.initComponent.initICheck == 'function' )
                window.initComponent.initICheck();
            
            if( typeof window.initComponent.initToUpper == 'function' )
                window.initComponent.initToUpper();
        },

        /**
        * Load spinner on the request
        */
        loadSpinner: function (model, xhr, opts) {
            window.Misc.setSpinner( this.el );
        },

        /**
        * response of the server
        */
        responseServer: function ( model, resp, opts ) {
            window.Misc.removeSpinner( this.el );

            if(!_.isUndefined(resp.success)) {
                // response success or error
                var text = resp.success ? '' : resp.errors;
                if( _.isObject( resp.errors ) ) {
                    text = window.Misc.parseErrors(resp.errors);
                }

                if( !resp.success ) {
                    alertify.error(text);
                    return;
                }

                window.Misc.redirect( window.Misc.urlFull( Route.route('zonas.index')) );
            }
        }
    });

})(jQuery, this, this.document);

/**
* Class MainZonasView
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.MainZonasView = Backbone.View.extend({

        el: '#zonas-main',

        /**
        * Constructor Method
        */
        initialize : function() {

            this.$zonasSearchTable = this.$('#zonas-search-table');

            this.$zonasSearchTable.DataTable({
                dom: "<'row'<'col-sm-4'B><'col-sm-4 text-center'l><'col-sm-4'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                processing: true,
                serverSide: true,
                language: window.Misc.dataTableES(),
                ajax: window.Misc.urlFull( Route.route('zonas.index') ),
                columns: [
                    { data: 'id', name: 'id' },
                    { data: 'zona_nombre', name: 'zona_nombre' },
                    { data: 'zona_activo', name: 'zona_activo'}
                ],
                buttons: [
                    {
                        text: '<i class="fa fa-plus"></i> Nueva Zona',
                        className: 'btn-sm',
                        action: function ( e, dt, node, config ) {
                            window.Misc.redirect( window.Misc.urlFull( Route.route('zonas.create') ) )
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return '<a href="'+ window.Misc.urlFull( Route.route('zonas.show', {zonas: full.id }) )  +'">' + data + '</a>';
                        }
                    },
                    {
                        targets: 2,
                        width: '10%',
                        render: function ( data, type, full, row ) {
                            return data ? 'Si' : 'No';
                        },
                    }
                ]
            });
        }
    });

})(jQuery, this, this.document);

/**
 * Utilities for seg component
 *
 *
 */
( function( $, window, document, undefined ){

    var Misc = function( a ){

        // attributes or global vars here

    }

    Misc.prototype = {

        /**
        * Inializes the functions when DOM ready
        */
        initialize: function(){

        },

        /**
         *  Serialize form into json format
         *
         *  @param { string } name class or id of the html element to embed the loader
         *  @return { object } form into json
         *
         */

        formToJson: function( selector ){
            var o = {}, a = [];
            if( $.prototype.isPrototypeOf(selector) ){
                a = selector.serializeArray();
            }
            else{
                a = $(selector).serializeArray();
            }

            $.each( a, function() {
                if ( o[ this.name ] !== undefined ) {
                    if ( ! o[this.name].push ) {
                        o[ this.name ] = [ o[ this.name ] ];
                    }

                    o[ this.name ].push( this.value || '' );

                } else {
                    o[ this.name ] = this.value || '';
                }
            });

            return o;
        },

        /**
        * validate the urls
        */
        isUrl : function( str ){

            // var patt = /^(http[s]?:\/\/(www\.)?|ftp:\/\/(www\.)?|www\.){1}([0-9A-Za-z-\.@:%_\+~#=]+)+\.[a-zA-Z]{2,3}(\/([^\n\r\s])*)?(\?([^\n\r\s])*)?/i;
            var patt = /^(http[s]?:\/\/(www\.)?|ftp:\/\/(www\.)?|www\.){1}([0-9A-Za-z-\.@:%_\+~#=]+)+(\/(.)*)?(\?(.)*)?/i;

            return patt.test( str );
        },

        /**
        * Build URI with route and base url
        */
        urlFull: function ( route ){

            if( !this.isUrl(document.url) )
                return route;

            route || (route = '');
            var patt = /^\//;
            patt.test(route) || (route = '/'+route);

            return document.url + route;
        },

        /**
        * Build URI with route and base url
        */
        parseErrors: function ( errors ){
            var text = '';
            if( _.isObject( errors ) ){

                var listError = '<ul>';

                $.each(errors, function(field, item) {
                     listError += '<li>'+ item[0] +'</li>';
                });
                listError += '</ul>';

                text = listError;
            }
            return text;
        },

        /**
        *  Sets a loading spinner in a box
        * @param { selector } String|Object Selector jQuery
        */
        setSpinner: function( selector ){
            if ( !selector ) return;

            $(selector).prepend('<div class="overlay"><i class="fa fa-refresh fa-spin"></i></div>');
        },

        /**
        * Removes the loading spinner and trigger a callback
        * @param { wrap } String|Object wrapper jQuery element
        *
        */
        removeSpinner: function( selector ){

            var $selector = $(selector).find( '.overlay' );

            if($selector.length)
                $selector.remove();
        },

        /**
        * Display the DataTables interface in Spanish
        */
        dataTableES: function(){
            return {
                "sProcessing":     "<div class=\"overlay\"><i class=\"fa fa-refresh fa-spin\"></i></div>",
                "sLengthMenu":     "Mostrar _MENU_ registros",
                "sZeroRecords":    "No se encontraron resultados",
                "sEmptyTable":     "Ningún dato disponible en esta tabla",
                "sInfo":           "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                "sInfoEmpty":      "Mostrando registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered":   "(filtrado de un total de _MAX_ registros)",
                "sInfoPostFix":    "",
                "sSearch":         "Buscar:",
                "sUrl":            "",
                "sInfoThousands":  ",",
                "sLoadingRecords": "Cargando...",
                "oPaginate": {
                    "sFirst":    "Primero",
                    "sLast":     "Último",
                    "sNext":     "Siguiente",
                    "sPrevious": "Anterior"
                },
                "oAria": {
                    "sSortAscending":  ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                }
            }
        },

        /**
        * Redirect to an specific url or refresh the page
        * @param { string } the url to be redirect to
        *
        */
        redirect: function( url ){
            if( url !== undefined && url != ''){
                window.location = url;
            }else{
                window.location.reload();
            }
        },

        /**
        * Redirect to an specific url or refresh the page
        * @param { string } the url to be redirect to
        *
        */
        successRedirect: function( msg, url ){
            alertify.success(msg);
            setTimeout(function(){
                window.Misc.redirect( url );
            }, 500);
        },

        /**
        * Format COP currency
        * @param { value }
        *
        */
        currency: function( value ){
            return accounting.formatMoney(value, '', 2, ".", ",");
        }
    };

    window.Misc = new Misc();
    window.Misc.initialize();

})( jQuery, this, this.document );

(function () {

    var laroute = (function () {

        var routes = {

            absolute: false,
            rootUrl: 'http://localhost',
            routes : [{"host":null,"methods":["POST"],"uri":"login","name":"login","action":"App\Http\Controllers\Auth\AuthController@postLogin"},{"host":null,"methods":["GET","HEAD"],"uri":"login","name":"login","action":"App\Http\Controllers\Auth\AuthController@getLogin"},{"host":null,"methods":["GET","HEAD"],"uri":"logout","name":"logout","action":"App\Http\Controllers\Auth\AuthController@getLogout"},{"host":null,"methods":["GET","HEAD"],"uri":"\/","name":"dashboard","action":"App\Http\Controllers\HomeController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"terceros\/dv","name":"terceros.dv","action":"App\Http\Controllers\Admin\TerceroController@dv"},{"host":null,"methods":["GET","HEAD"],"uri":"terceros\/rcree","name":"terceros.rcree","action":"App\Http\Controllers\Admin\TerceroController@rcree"},{"host":null,"methods":["GET","HEAD"],"uri":"terceros\/search","name":"terceros.search","action":"App\Http\Controllers\Admin\TerceroController@search"},{"host":null,"methods":["GET","HEAD"],"uri":"terceros\/contactos","name":"terceros.contactos.index","action":"App\Http\Controllers\Admin\ContactoController@index"},{"host":null,"methods":["POST"],"uri":"terceros\/contactos","name":"terceros.contactos.store","action":"App\Http\Controllers\Admin\ContactoController@store"},{"host":null,"methods":["PUT"],"uri":"terceros\/contactos\/{contactos}","name":"terceros.contactos.update","action":"App\Http\Controllers\Admin\ContactoController@update"},{"host":null,"methods":["PATCH"],"uri":"terceros\/contactos\/{contactos}","name":null,"action":"App\Http\Controllers\Admin\ContactoController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"terceros","name":"terceros.index","action":"App\Http\Controllers\Admin\TerceroController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"terceros\/create","name":"terceros.create","action":"App\Http\Controllers\Admin\TerceroController@create"},{"host":null,"methods":["POST"],"uri":"terceros","name":"terceros.store","action":"App\Http\Controllers\Admin\TerceroController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"terceros\/{terceros}","name":"terceros.show","action":"App\Http\Controllers\Admin\TerceroController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"terceros\/{terceros}\/edit","name":"terceros.edit","action":"App\Http\Controllers\Admin\TerceroController@edit"},{"host":null,"methods":["PUT"],"uri":"terceros\/{terceros}","name":"terceros.update","action":"App\Http\Controllers\Admin\TerceroController@update"},{"host":null,"methods":["PATCH"],"uri":"terceros\/{terceros}","name":null,"action":"App\Http\Controllers\Admin\TerceroController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"actividades","name":"actividades.index","action":"App\Http\Controllers\Admin\ActividadController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"actividades\/create","name":"actividades.create","action":"App\Http\Controllers\Admin\ActividadController@create"},{"host":null,"methods":["POST"],"uri":"actividades","name":"actividades.store","action":"App\Http\Controllers\Admin\ActividadController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"actividades\/{actividades}","name":"actividades.show","action":"App\Http\Controllers\Admin\ActividadController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"actividades\/{actividades}\/edit","name":"actividades.edit","action":"App\Http\Controllers\Admin\ActividadController@edit"},{"host":null,"methods":["PUT"],"uri":"actividades\/{actividades}","name":"actividades.update","action":"App\Http\Controllers\Admin\ActividadController@update"},{"host":null,"methods":["PATCH"],"uri":"actividades\/{actividades}","name":null,"action":"App\Http\Controllers\Admin\ActividadController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"departamentos","name":"departamentos.index","action":"App\Http\Controllers\Admin\DepartamentoController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"departamentos\/{departamentos}","name":"departamentos.show","action":"App\Http\Controllers\Admin\DepartamentoController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"municipios","name":"municipios.index","action":"App\Http\Controllers\Admin\MunicipioController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"sucursales","name":"sucursales.index","action":"App\Http\Controllers\Admin\SucursalController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"sucursales\/create","name":"sucursales.create","action":"App\Http\Controllers\Admin\SucursalController@create"},{"host":null,"methods":["POST"],"uri":"sucursales","name":"sucursales.store","action":"App\Http\Controllers\Admin\SucursalController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"sucursales\/{sucursales}","name":"sucursales.show","action":"App\Http\Controllers\Admin\SucursalController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"sucursales\/{sucursales}\/edit","name":"sucursales.edit","action":"App\Http\Controllers\Admin\SucursalController@edit"},{"host":null,"methods":["PUT"],"uri":"sucursales\/{sucursales}","name":"sucursales.update","action":"App\Http\Controllers\Admin\SucursalController@update"},{"host":null,"methods":["PATCH"],"uri":"sucursales\/{sucursales}","name":null,"action":"App\Http\Controllers\Admin\SucursalController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"estados","name":"estados.index","action":"App\Http\Controllers\Admin\EstadoController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"estados\/create","name":"estados.create","action":"App\Http\Controllers\Admin\EstadoController@create"},{"host":null,"methods":["POST"],"uri":"estados","name":"estados.store","action":"App\Http\Controllers\Admin\EstadoController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"estados\/{estados}","name":"estados.show","action":"App\Http\Controllers\Admin\EstadoController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"estados\/{estados}\/edit","name":"estados.edit","action":"App\Http\Controllers\Admin\EstadoController@edit"},{"host":null,"methods":["PUT"],"uri":"estados\/{estados}","name":"estados.update","action":"App\Http\Controllers\Admin\EstadoController@update"},{"host":null,"methods":["PATCH"],"uri":"estados\/{estados}","name":null,"action":"App\Http\Controllers\Admin\EstadoController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"modelos","name":"modelos.index","action":"App\Http\Controllers\Inventario\ModeloController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"modelos\/create","name":"modelos.create","action":"App\Http\Controllers\Inventario\ModeloController@create"},{"host":null,"methods":["POST"],"uri":"modelos","name":"modelos.store","action":"App\Http\Controllers\Inventario\ModeloController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"modelos\/{modelos}","name":"modelos.show","action":"App\Http\Controllers\Inventario\ModeloController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"modelos\/{modelos}\/edit","name":"modelos.edit","action":"App\Http\Controllers\Inventario\ModeloController@edit"},{"host":null,"methods":["PUT"],"uri":"modelos\/{modelos}","name":"modelos.update","action":"App\Http\Controllers\Inventario\ModeloController@update"},{"host":null,"methods":["PATCH"],"uri":"modelos\/{modelos}","name":null,"action":"App\Http\Controllers\Inventario\ModeloController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"marcas","name":"marcas.index","action":"App\Http\Controllers\Inventario\MarcaController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"marcas\/create","name":"marcas.create","action":"App\Http\Controllers\Inventario\MarcaController@create"},{"host":null,"methods":["POST"],"uri":"marcas","name":"marcas.store","action":"App\Http\Controllers\Inventario\MarcaController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"marcas\/{marcas}","name":"marcas.show","action":"App\Http\Controllers\Inventario\MarcaController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"marcas\/{marcas}\/edit","name":"marcas.edit","action":"App\Http\Controllers\Inventario\MarcaController@edit"},{"host":null,"methods":["PUT"],"uri":"marcas\/{marcas}","name":"marcas.update","action":"App\Http\Controllers\Inventario\MarcaController@update"},{"host":null,"methods":["PATCH"],"uri":"marcas\/{marcas}","name":null,"action":"App\Http\Controllers\Inventario\MarcaController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"tipos","name":"tipos.index","action":"App\Http\Controllers\Inventario\TipoController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"tipos\/create","name":"tipos.create","action":"App\Http\Controllers\Inventario\TipoController@create"},{"host":null,"methods":["POST"],"uri":"tipos","name":"tipos.store","action":"App\Http\Controllers\Inventario\TipoController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"tipos\/{tipos}","name":"tipos.show","action":"App\Http\Controllers\Inventario\TipoController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"tipos\/{tipos}\/edit","name":"tipos.edit","action":"App\Http\Controllers\Inventario\TipoController@edit"},{"host":null,"methods":["PUT"],"uri":"tipos\/{tipos}","name":"tipos.update","action":"App\Http\Controllers\Inventario\TipoController@update"},{"host":null,"methods":["PATCH"],"uri":"tipos\/{tipos}","name":null,"action":"App\Http\Controllers\Inventario\TipoController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"contadores","name":"contadores.index","action":"App\Http\Controllers\Inventario\ContadorController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"contadores\/create","name":"contadores.create","action":"App\Http\Controllers\Inventario\ContadorController@create"},{"host":null,"methods":["POST"],"uri":"contadores","name":"contadores.store","action":"App\Http\Controllers\Inventario\ContadorController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"contadores\/{contadores}","name":"contadores.show","action":"App\Http\Controllers\Inventario\ContadorController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"contadores\/{contadores}\/edit","name":"contadores.edit","action":"App\Http\Controllers\Inventario\ContadorController@edit"},{"host":null,"methods":["PUT"],"uri":"contadores\/{contadores}","name":"contadores.update","action":"App\Http\Controllers\Inventario\ContadorController@update"},{"host":null,"methods":["PATCH"],"uri":"contadores\/{contadores}","name":null,"action":"App\Http\Controllers\Inventario\ContadorController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"productos\/search","name":"productos.search","action":"App\Http\Controllers\Inventario\ProductoController@search"},{"host":null,"methods":["GET","HEAD"],"uri":"productos\/sirveas","name":"productos.sirveas.index","action":"App\Http\Controllers\Inventario\SirveaController@index"},{"host":null,"methods":["POST"],"uri":"productos\/sirveas","name":"productos.sirveas.store","action":"App\Http\Controllers\Inventario\SirveaController@store"},{"host":null,"methods":["DELETE"],"uri":"productos\/sirveas\/{sirveas}","name":"productos.sirveas.destroy","action":"App\Http\Controllers\Inventario\SirveaController@destroy"},{"host":null,"methods":["GET","HEAD"],"uri":"productos\/productoscontador","name":"productos.productoscontador.index","action":"App\Http\Controllers\Inventario\ProductoContadorController@index"},{"host":null,"methods":["POST"],"uri":"productos\/productoscontador","name":"productos.productoscontador.store","action":"App\Http\Controllers\Inventario\ProductoContadorController@store"},{"host":null,"methods":["DELETE"],"uri":"productos\/productoscontador\/{productoscontador}","name":"productos.productoscontador.destroy","action":"App\Http\Controllers\Inventario\ProductoContadorController@destroy"},{"host":null,"methods":["GET","HEAD"],"uri":"productos","name":"productos.index","action":"App\Http\Controllers\Inventario\ProductoController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"productos\/create","name":"productos.create","action":"App\Http\Controllers\Inventario\ProductoController@create"},{"host":null,"methods":["POST"],"uri":"productos","name":"productos.store","action":"App\Http\Controllers\Inventario\ProductoController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"productos\/{productos}","name":"productos.show","action":"App\Http\Controllers\Inventario\ProductoController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"productos\/{productos}\/edit","name":"productos.edit","action":"App\Http\Controllers\Inventario\ProductoController@edit"},{"host":null,"methods":["PUT"],"uri":"productos\/{productos}","name":"productos.update","action":"App\Http\Controllers\Inventario\ProductoController@update"},{"host":null,"methods":["PATCH"],"uri":"productos\/{productos}","name":null,"action":"App\Http\Controllers\Inventario\ProductoController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"contratos\/danoc","name":"contratos.danoc.index","action":"App\Http\Controllers\Tecnico\ContratoDanoController@index"},{"host":null,"methods":["POST"],"uri":"contratos\/danoc","name":"contratos.danoc.store","action":"App\Http\Controllers\Tecnico\ContratoDanoController@store"},{"host":null,"methods":["DELETE"],"uri":"contratos\/danoc\/{danoc}","name":"contratos.danoc.destroy","action":"App\Http\Controllers\Tecnico\ContratoDanoController@destroy"},{"host":null,"methods":["GET","HEAD"],"uri":"ordenes\/visitas","name":"ordenes.visitas.index","action":"App\Http\Controllers\Tecnico\VisitaController@index"},{"host":null,"methods":["POST"],"uri":"ordenes\/visitas","name":"ordenes.visitas.store","action":"App\Http\Controllers\Tecnico\VisitaController@store"},{"host":null,"methods":["DELETE"],"uri":"ordenes\/visitas\/{visitas}","name":"ordenes.visitas.destroy","action":"App\Http\Controllers\Tecnico\VisitaController@destroy"},{"host":null,"methods":["GET","HEAD"],"uri":"ordenes\/visitasp","name":"ordenes.visitasp.index","action":"App\Http\Controllers\Tecnico\VisitapController@index"},{"host":null,"methods":["POST"],"uri":"ordenes\/visitasp","name":"ordenes.visitasp.store","action":"App\Http\Controllers\Tecnico\VisitapController@store"},{"host":null,"methods":["DELETE"],"uri":"ordenes\/visitasp\/{visitasp}","name":"ordenes.visitasp.destroy","action":"App\Http\Controllers\Tecnico\VisitapController@destroy"},{"host":null,"methods":["GET","HEAD"],"uri":"ordenes\/contadoresp","name":"ordenes.contadoresp.index","action":"App\Http\Controllers\Tecnico\ContadorespController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"contratos","name":"contratos.index","action":"App\Http\Controllers\Tecnico\ContratoController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"contratos\/create","name":"contratos.create","action":"App\Http\Controllers\Tecnico\ContratoController@create"},{"host":null,"methods":["POST"],"uri":"contratos","name":"contratos.store","action":"App\Http\Controllers\Tecnico\ContratoController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"contratos\/{contratos}","name":"contratos.show","action":"App\Http\Controllers\Tecnico\ContratoController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"contratos\/{contratos}\/edit","name":"contratos.edit","action":"App\Http\Controllers\Tecnico\ContratoController@edit"},{"host":null,"methods":["PUT"],"uri":"contratos\/{contratos}","name":"contratos.update","action":"App\Http\Controllers\Tecnico\ContratoController@update"},{"host":null,"methods":["PATCH"],"uri":"contratos\/{contratos}","name":null,"action":"App\Http\Controllers\Tecnico\ContratoController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"ordenes","name":"ordenes.index","action":"App\Http\Controllers\Tecnico\OrdenController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"ordenes\/create","name":"ordenes.create","action":"App\Http\Controllers\Tecnico\OrdenController@create"},{"host":null,"methods":["POST"],"uri":"ordenes","name":"ordenes.store","action":"App\Http\Controllers\Tecnico\OrdenController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"ordenes\/{ordenes}","name":"ordenes.show","action":"App\Http\Controllers\Tecnico\OrdenController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"ordenes\/{ordenes}\/edit","name":"ordenes.edit","action":"App\Http\Controllers\Tecnico\OrdenController@edit"},{"host":null,"methods":["PUT"],"uri":"ordenes\/{ordenes}","name":"ordenes.update","action":"App\Http\Controllers\Tecnico\OrdenController@update"},{"host":null,"methods":["PATCH"],"uri":"ordenes\/{ordenes}","name":null,"action":"App\Http\Controllers\Tecnico\OrdenController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"tiposorden","name":"tiposorden.index","action":"App\Http\Controllers\Tecnico\TipoOrdenController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"tiposorden\/create","name":"tiposorden.create","action":"App\Http\Controllers\Tecnico\TipoOrdenController@create"},{"host":null,"methods":["POST"],"uri":"tiposorden","name":"tiposorden.store","action":"App\Http\Controllers\Tecnico\TipoOrdenController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"tiposorden\/{tiposorden}","name":"tiposorden.show","action":"App\Http\Controllers\Tecnico\TipoOrdenController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"tiposorden\/{tiposorden}\/edit","name":"tiposorden.edit","action":"App\Http\Controllers\Tecnico\TipoOrdenController@edit"},{"host":null,"methods":["PUT"],"uri":"tiposorden\/{tiposorden}","name":"tiposorden.update","action":"App\Http\Controllers\Tecnico\TipoOrdenController@update"},{"host":null,"methods":["PATCH"],"uri":"tiposorden\/{tiposorden}","name":null,"action":"App\Http\Controllers\Tecnico\TipoOrdenController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"solicitantes","name":"solicitantes.index","action":"App\Http\Controllers\Tecnico\SolicitanteController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"solicitantes\/create","name":"solicitantes.create","action":"App\Http\Controllers\Tecnico\SolicitanteController@create"},{"host":null,"methods":["POST"],"uri":"solicitantes","name":"solicitantes.store","action":"App\Http\Controllers\Tecnico\SolicitanteController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"solicitantes\/{solicitantes}","name":"solicitantes.show","action":"App\Http\Controllers\Tecnico\SolicitanteController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"solicitantes\/{solicitantes}\/edit","name":"solicitantes.edit","action":"App\Http\Controllers\Tecnico\SolicitanteController@edit"},{"host":null,"methods":["PUT"],"uri":"solicitantes\/{solicitantes}","name":"solicitantes.update","action":"App\Http\Controllers\Tecnico\SolicitanteController@update"},{"host":null,"methods":["PATCH"],"uri":"solicitantes\/{solicitantes}","name":null,"action":"App\Http\Controllers\Tecnico\SolicitanteController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"danos","name":"danos.index","action":"App\Http\Controllers\Tecnico\DanoController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"danos\/create","name":"danos.create","action":"App\Http\Controllers\Tecnico\DanoController@create"},{"host":null,"methods":["POST"],"uri":"danos","name":"danos.store","action":"App\Http\Controllers\Tecnico\DanoController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"danos\/{danos}","name":"danos.show","action":"App\Http\Controllers\Tecnico\DanoController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"danos\/{danos}\/edit","name":"danos.edit","action":"App\Http\Controllers\Tecnico\DanoController@edit"},{"host":null,"methods":["PUT"],"uri":"danos\/{danos}","name":"danos.update","action":"App\Http\Controllers\Tecnico\DanoController@update"},{"host":null,"methods":["PATCH"],"uri":"danos\/{danos}","name":null,"action":"App\Http\Controllers\Tecnico\DanoController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"prioridades","name":"prioridades.index","action":"App\Http\Controllers\Tecnico\PrioridadController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"prioridades\/create","name":"prioridades.create","action":"App\Http\Controllers\Tecnico\PrioridadController@create"},{"host":null,"methods":["POST"],"uri":"prioridades","name":"prioridades.store","action":"App\Http\Controllers\Tecnico\PrioridadController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"prioridades\/{prioridades}","name":"prioridades.show","action":"App\Http\Controllers\Tecnico\PrioridadController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"prioridades\/{prioridades}\/edit","name":"prioridades.edit","action":"App\Http\Controllers\Tecnico\PrioridadController@edit"},{"host":null,"methods":["PUT"],"uri":"prioridades\/{prioridades}","name":"prioridades.update","action":"App\Http\Controllers\Tecnico\PrioridadController@update"},{"host":null,"methods":["PATCH"],"uri":"prioridades\/{prioridades}","name":null,"action":"App\Http\Controllers\Tecnico\PrioridadController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"zonas","name":"zonas.index","action":"App\Http\Controllers\Tecnico\ZonaController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"zonas\/create","name":"zonas.create","action":"App\Http\Controllers\Tecnico\ZonaController@create"},{"host":null,"methods":["POST"],"uri":"zonas","name":"zonas.store","action":"App\Http\Controllers\Tecnico\ZonaController@store"},{"host":null,"methods":["GET","HEAD"],"uri":"zonas\/{zonas}","name":"zonas.show","action":"App\Http\Controllers\Tecnico\ZonaController@show"},{"host":null,"methods":["GET","HEAD"],"uri":"zonas\/{zonas}\/edit","name":"zonas.edit","action":"App\Http\Controllers\Tecnico\ZonaController@edit"},{"host":null,"methods":["PUT"],"uri":"zonas\/{zonas}","name":"zonas.update","action":"App\Http\Controllers\Tecnico\ZonaController@update"},{"host":null,"methods":["PATCH"],"uri":"zonas\/{zonas}","name":null,"action":"App\Http\Controllers\Tecnico\ZonaController@update"},{"host":null,"methods":["GET","HEAD"],"uri":"asignaciones\/detalle","name":"asignaciones.detalle.index","action":"App\Http\Controllers\Tecnico\Asignacion2Controller@index"},{"host":null,"methods":["POST"],"uri":"asignaciones\/detalle","name":"asignaciones.detalle.store","action":"App\Http\Controllers\Tecnico\Asignacion2Controller@store"},{"host":null,"methods":["GET","HEAD"],"uri":"asignaciones\/contratos","name":"asignaciones.contratos.index","action":"App\Http\Controllers\Tecnico\ContratoController@index"},{"host":null,"methods":["GET","HEAD"],"uri":"asignaciones","name":"asignaciones.index","action":"App\Http\Controllers\Tecnico\Asignacion1Controller@index"},{"host":null,"methods":["GET","HEAD"],"uri":"asignaciones\/create","name":"asignaciones.create","action":"App\Http\Controllers\Tecnico\Asignacion1Controller@create"},{"host":null,"methods":["POST"],"uri":"asignaciones","name":"asignaciones.store","action":"App\Http\Controllers\Tecnico\Asignacion1Controller@store"},{"host":null,"methods":["GET","HEAD"],"uri":"asignaciones\/{asignaciones}","name":"asignaciones.show","action":"App\Http\Controllers\Tecnico\Asignacion1Controller@show"},{"host":null,"methods":["PUT"],"uri":"asignaciones\/{asignaciones}","name":"asignaciones.update","action":"App\Http\Controllers\Tecnico\Asignacion1Controller@update"},{"host":null,"methods":["PATCH"],"uri":"asignaciones\/{asignaciones}","name":null,"action":"App\Http\Controllers\Tecnico\Asignacion1Controller@update"}],
            prefix: '',

            route : function (name, parameters, route) {
                route = route || this.getByName(name);

                if ( ! route ) {
                    return undefined;
                }

                return this.toRoute(route, parameters);
            },

            url: function (url, parameters) {
                parameters = parameters || [];

                var uri = url + '/' + parameters.join('/');

                return this.getCorrectUrl(uri);
            },

            toRoute : function (route, parameters) {
                var uri = this.replaceNamedParameters(route.uri, parameters);
                var qs  = this.getRouteQueryString(parameters);

                if (this.absolute && this.isOtherHost(route)){
                    return "//" + route.host + "/" + uri + qs;
                }

                return this.getCorrectUrl(uri + qs);
            },

            isOtherHost: function (route){
                return route.host && route.host != window.location.hostname;
            },

            replaceNamedParameters : function (uri, parameters) {
                uri = uri.replace(/\{(.*?)\??\}/g, function(match, key) {
                    if (parameters.hasOwnProperty(key)) {
                        var value = parameters[key];
                        delete parameters[key];
                        return value;
                    } else {
                        return match;
                    }
                });

                // Strip out any optional parameters that were not given
                uri = uri.replace(/\/\{.*?\?\}/g, '');

                return uri;
            },

            getRouteQueryString : function (parameters) {
                var qs = [];
                for (var key in parameters) {
                    if (parameters.hasOwnProperty(key)) {
                        qs.push(key + '=' + parameters[key]);
                    }
                }

                if (qs.length < 1) {
                    return '';
                }

                return '?' + qs.join('&');
            },

            getByName : function (name) {
                for (var key in this.routes) {
                    if (this.routes.hasOwnProperty(key) && this.routes[key].name === name) {
                        return this.routes[key];
                    }
                }
            },

            getByAction : function(action) {
                for (var key in this.routes) {
                    if (this.routes.hasOwnProperty(key) && this.routes[key].action === action) {
                        return this.routes[key];
                    }
                }
            },

            getCorrectUrl: function (uri) {
                var url = this.prefix + '/' + uri.replace(/^\/?/, '');

                if ( ! this.absolute) {
                    return url;
                }

                return this.rootUrl.replace('/\/?$/', '') + url;
            }
        };

        var getLinkAttributes = function(attributes) {
            if ( ! attributes) {
                return '';
            }

            var attrs = [];
            for (var key in attributes) {
                if (attributes.hasOwnProperty(key)) {
                    attrs.push(key + '="' + attributes[key] + '"');
                }
            }

            return attrs.join(' ');
        };

        var getHtmlLink = function (url, title, attributes) {
            title      = title || url;
            attributes = getLinkAttributes(attributes);

            return '<a href="' + url + '" ' + attributes + '>' + title + '</a>';
        };

        return {
            // Generate a url for a given controller action.
            // Route.action('HomeController@getIndex', [params = {}])
            action : function (name, parameters) {
                parameters = parameters || {};

                return routes.route(name, parameters, routes.getByAction(name));
            },

            // Generate a url for a given named route.
            // Route.route('routeName', [params = {}])
            route : function (route, parameters) {
                parameters = parameters || {};

                return routes.route(route, parameters);
            },

            // Generate a fully qualified URL to the given path.
            // Route.route('url', [params = {}])
            url : function (route, parameters) {
                parameters = parameters || {};

                return routes.url(route, parameters);
            },

            // Generate a html link to the given url.
            // Route.link_to('foo/bar', [title = url], [attributes = {}])
            link_to : function (url, title, attributes) {
                url = this.url(url);

                return getHtmlLink(url, title, attributes);
            },

            // Generate a html link to the given route.
            // Route.link_to_route('route.name', [title=url], [parameters = {}], [attributes = {}])
            link_to_route : function (route, title, parameters, attributes) {
                var url = this.route(route, parameters);

                return getHtmlLink(url, title, attributes);
            },

            // Generate a html link to the given controller action.
            // Route.link_to_action('HomeController@getIndex', [title=url], [parameters = {}], [attributes = {}])
            link_to_action : function(action, title, parameters, attributes) {
                var url = this.action(action, parameters);

                return getHtmlLink(url, title, attributes);
            }

        };

    }).call(this);

    /**
     * Expose the class either via AMD, CommonJS or the global object
     */
    if (typeof define === 'function' && define.amd) {
        define(function () {
            return laroute;
        });
    }
    else if (typeof module === 'object' && module.exports){
        module.exports = laroute;
    }
    else {
        window.Route = laroute;
    }

}).call(this);


/**
* Class AppRouter  of Backbone Router
* @author KOI || @dropecamargo
* @link http://koi-ti.com
*/

//Global App Backbone
app || (app = {});

(function ($, window, document, undefined) {

    app.AppRouter = new( Backbone.Router.extend({
        routes : {
            //Login
            'login(/)': 'getLogin',

            /*
            |-----------------------
            | Administracion
            |-----------------------
            */

            //Terceros
            'terceros(/)': 'getTercerosMain',
            'terceros/create(/)': 'getTercerosCreate',
            'terceros/:tercero(/)': 'getTercerosShow',
            'terceros/:tercero/edit(/)': 'getTercerosEdit',

            //Actividades
            'actividades(/)': 'getActividadesMain',
            'actividades/create(/)': 'getActividadesCreate',
            'actividades/:actividad/edit(/)': 'getActividadesEdit',

            //Sucursales
            'sucursales(/)': 'getSucursalesMain',
            'sucursales/create(/)': 'getSucursalesCreate',
            'sucursales/:sucursal/edit(/)': 'getSucursalesEdit',

            //Departamentos & Municipios
            'departamentos(/)': 'getDepartamentosMain',
            'municipios(/)': 'getMunicipiosMain',

            //Estados
            'estados(/)': 'getEstadosMain',
            'estados/create(/)': 'getEstadosCreate',
            'estados/:modelo/edit(/)': 'getEstadosEdit',

            /*
            |----------------------
            | Inventario
            |----------------------
            */

            //Productos
            'productos(/)': 'getProductosMain',
            'productos/create(/)': 'getProductosCreate',
            'productos/:productos/edit(/)': 'getProductosEdit',
            'productos/:productos(/)': 'getProductosShow',

            //Marcas
            'marcas(/)': 'getMarcasMain',
            'marcas/create(/)': 'getMarcasCreate',
            'marcas/:marcas/edit(/)': 'getMarcasEdit',

            //Tipos
            'tipos(/)': 'getTiposMain',
            'tipos/create(/)': 'getTiposCreate',
            'tipos/:tipos/edit(/)': 'getTiposEdit',

            //Modelos
            'modelos(/)': 'getModelosMain',
            'modelos/create(/)': 'getModelosCreate',
            'modelos/:modelo/edit(/)': 'getModelosEdit',

            //Contadores
            'contadores(/)': 'getContadoresMain',
            'contadores/create(/)': 'getContadoresCreate',
            'contadores/:contadores/edit(/)': 'getContadoresEdit',

            /*
            |----------------------
            | Tecnico
            |----------------------
            */

            //Tipo de Orden
            'tiposorden(/)': 'getTiposOrdenMain',
            'tiposorden/create(/)': 'getTiposOrdenCreate',
            'tiposorden/:tiposorden/edit(/)': 'getTiposOrdenEdit',

            //Solicitante
            'solicitantes(/)': 'getSolicitantesMain',
            'solicitantes/create(/)': 'getSolicitantesCreate',
            'solicitantes/:solicitantes/edit(/)': 'getSolicitantesEdit',

            //Daño
            'danos(/)': 'getDanosMain',
            'danos/create(/)': 'getDanosCreate',
            'danos/:danos/edit(/)': 'getDanosEdit',

            //Contratos
            'contratos(/)': 'getContratosMain',
            'contratos/create(/)': 'getContratosCreate',
            'contratos/:contrato(/)': 'getContratoShow',
            'contratos/:contrato/edit(/)': 'getContratosEdit',

            //Ordenes
            'ordenes(/)': 'getOrdenesMain',
            'ordenes/create(/)': 'getOrdenesCreate',
            //'ordenes/:orden(/)': 'getOrdenesShow',
            'ordenes/visitasp/create(/)(?*queryString)': 'getOrdenesVisitaspCreate',
            'ordenes/:orden/edit(/)': 'getOrdenesEdit',

            //Prioridad
            'prioridades(/)': 'getPrioridadesMain',
            'prioridades/create(/)': 'getPrioridadesCreate',
            'prioridades/:prioridades/edit(/)': 'getPrioridadesEdit',

            //Zona
            'zonas(/)': 'getZonasMain',
            'zonas/create(/)': 'getZonasCreate',
            'zonas/:zonas/edit(/)': 'getZonasEdit',

            //Asignacion #1
            'asignaciones(/)': 'getAsignacionesMain',
            'asignaciones/create(/)': 'getAsignacionesCreate',
            'asignaciones/:asignacion(/)': 'getAsignacionesShow',
        },

        /**
        * Parse queryString to object
        */
        parseQueryString : function(queryString) {
            var params = {};
            if(queryString) {
                _.each(
                    _.map(decodeURI(queryString).split(/&/g),function(el,i){
                        var aux = el.split('='), o = {};
                        if(aux.length >= 1){
                            var val = undefined;
                            if(aux.length == 2)
                                val = aux[1];
                            o[aux[0]] = val;
                        }
                        return o;
                    }),
                    function(o){
                        _.extend(params,o);
                    }
                );
            }
            return params;
        },

        /**
        * Constructor Method
        */
        initialize : function ( opts ){
            // Initialize resources
            this.componentGlobalView = new app.ComponentGlobalView();
            this.componentSearchTerceroView = new app.ComponentSearchTerceroView();
            this.componentTerceroView = new app.ComponentTerceroView();
            this.componentCreateResourceView = new app.ComponentCreateResourceView();
            this.componentSearchProductoView = new app.ComponentSearchProductoView();
            this.componentSearchContactoView = new app.ComponentSearchContactoView();
            this.componentSearchContratoView = new app.ComponentSearchContratoView();
      	},

        /**
        * Start Backbone history
        */
        start: function () {
            var config = { pushState: true };

            if( document.domain.search(/(104.236.57.82|localhost)/gi) != '-1' )
                config.root = '/sophia/public/';

            Backbone.history.start( config );
        },

        /**
        * show view in Calendar Event
        * @param String show
        */
        getLogin: function () {

            if ( this.loginView instanceof Backbone.View ){
                this.loginView.stopListening();
                this.loginView.undelegateEvents();
            }

            this.loginView = new app.UserLoginView( );
        },

        /*------------------------
        | Administracion
        /*-----------------------*/

        // Tercero
        getTercerosMain: function () {

            if ( this.mainTerceroView instanceof Backbone.View ){
                this.mainTerceroView.stopListening();
                this.mainTerceroView.undelegateEvents();
            }

            this.mainTerceroView = new app.MainTerceroView( );
        },

        getTercerosCreate: function () {
            this.terceroModel = new app.TerceroModel();

            if ( this.createTerceroView instanceof Backbone.View ){
                this.createTerceroView.stopListening();
                this.createTerceroView.undelegateEvents();
            }

            this.createTerceroView = new app.CreateTerceroView({ model: this.terceroModel });
            this.createTerceroView.render();
        },

        getTercerosShow: function (tercero) {
            this.terceroModel = new app.TerceroModel();
            this.terceroModel.set({'id': tercero}, {'silent':true});

            if ( this.showTerceroView instanceof Backbone.View ){
                this.showTerceroView.stopListening();
                this.showTerceroView.undelegateEvents();
            }

            this.showTerceroView = new app.ShowTerceroView({ model: this.terceroModel });
        },

        getTercerosEdit: function (tercero) {
            this.terceroModel = new app.TerceroModel();
            this.terceroModel.set({'id': tercero}, {'silent':true});

            if ( this.createTerceroView instanceof Backbone.View ){
                this.createTerceroView.stopListening();
                this.createTerceroView.undelegateEvents();
            }

            this.createTerceroView = new app.CreateTerceroView({ model: this.terceroModel });
            this.terceroModel.fetch();
        },

        /**
        * show view main actividades
        */
        getActividadesMain: function () {

            if ( this.mainActividadView instanceof Backbone.View ){
                this.mainActividadView.stopListening();
                this.mainActividadView.undelegateEvents();
            }

            this.mainActividadView = new app.MainActividadView( );
        },

        getActividadesCreate: function () {
            this.actividadModel = new app.ActividadModel();

            if ( this.createActividadView instanceof Backbone.View ){
                this.createActividadView.stopListening();
                this.createActividadView.undelegateEvents();
            }

            this.createActividadView = new app.CreateActividadView({ model: this.actividadModel });
            this.createActividadView.render();
        },

        getActividadesEdit: function (actividad) {
            this.actividadModel = new app.ActividadModel();
            this.actividadModel.set({'id': actividad}, {silent: true});

            if ( this.createActividadView instanceof Backbone.View ){
                this.createActividadView.stopListening();
                this.createActividadView.undelegateEvents();
            }

            this.createActividadView = new app.CreateActividadView({ model: this.actividadModel });
            this.actividadModel.fetch();
        },

        // Sucursales
        getSucursalesMain: function () {

            if ( this.mainSucursalesView instanceof Backbone.View ){
                this.mainSucursalesView.stopListening();
                this.mainSucursalesView.undelegateEvents();
            }

            this.mainSucursalesView = new app.MainSucursalesView( );
        },

        getSucursalesCreate: function () {
            this.sucursalModel = new app.SucursalModel();

            if ( this.createSucursalView instanceof Backbone.View ){
                this.createSucursalView.stopListening();
                this.createSucursalView.undelegateEvents();
            }

            this.createSucursalView = new app.CreateSucursalView({ model: this.sucursalModel });
            this.createSucursalView.render();
        },

        getSucursalesEdit: function (sucursal) {
            this.sucursalModel = new app.SucursalModel();
            this.sucursalModel.set({'id': sucursal}, {silent: true});

            if ( this.createSucursalView instanceof Backbone.View ){
                this.createSucursalView.stopListening();
                this.createSucursalView.undelegateEvents();
            }

            this.createSucursalView = new app.CreateSucursalView({ model: this.sucursalModel });
            this.sucursalModel.fetch();
        },

        // Vistas de Departamentos
        getDepartamentosMain: function () {

            if ( this.mainDepartamentoView instanceof Backbone.View ){
                this.mainDepartamentoView.stopListening();
                this.mainDepartamentoView.undelegateEvents();
            }

            this.mainDepartamentoView = new app.MainDepartamentoView( );
        },

        // Vistas de Municipios
        getMunicipiosMain: function () {

            if ( this.mainMunicipioView instanceof Backbone.View ){
                this.mainMunicipioView.stopListening();
                this.mainMunicipioView.undelegateEvents();
            }

            this.mainMunicipioView = new app.MainMunicipioView( );
        },

        // Estados
        getEstadosMain: function () {

            if ( this.mainEstadoView instanceof Backbone.View ){
                this.mainEstadoView.stopListening();
                this.mainEstadoView.undelegateEvents();
            }

            this.mainEstadoView = new app.MainEstadosView( );
        },

        getEstadosCreate: function () {
            this.estadoModel = new app.EstadoModel();

            if ( this.createEstadoView instanceof Backbone.View ){
                this.createEstadoView.stopListening();
                this.createEstadoView.undelegateEvents();
            }

            this.createEstadoView = new app.CreateEstadoView({ model: this.estadoModel });
            this.createEstadoView.render();
        },

        getEstadosEdit: function (estados) {
            this.estadoModel = new app.EstadoModel();
            this.estadoModel.set({'id': estados}, {'silent':true});

            if ( this.createEstadoView instanceof Backbone.View ){
                this.createEstadoView.stopListening();
                this.createEstadoView.undelegateEvents();
            }

            this.createEstadoView = new app.CreateEstadoView({ model: this.estadoModel });
            this.estadoModel.fetch();
        },

        /*------------------------
        | Inventario
        /*----------------------*/

        // Producto
        getProductosMain: function () {

            if ( this.mainProductoView instanceof Backbone.View ){
                this.mainProductoView.stopListening();
                this.mainProductoView.undelegateEvents();
            }

            this.mainProductoView = new app.MainProductosView( );
        },

        getProductosCreate: function () {
            this.productoModel = new app.ProductoModel();

            if ( this.createProductoView instanceof Backbone.View ){
                this.createProductoView.stopListening();
                this.createProductoView.undelegateEvents();
            }

            this.createProductoView = new app.CreateProductoView({ model: this.productoModel });
            this.createProductoView.render();
        },

        getProductosEdit: function (productos) {
            this.productoModel = new app.ProductoModel();
            this.productoModel.set({'id': productos}, {'silent':true});

            if ( this.createProductoView instanceof Backbone.View ){
                this.createProductoView.stopListening();
                this.createProductoView.undelegateEvents();
            }

            this.createProductoView = new app.CreateProductoView({ model: this.productoModel });
            this.productoModel.fetch();
        },

        /**
        * show view show tercero
        */
        getProductosShow: function (productos) {
            this.productoModel = new app.ProductoModel();
            this.productoModel.set({'id': productos}, {silent: true});

            if ( this.showProductoView instanceof Backbone.View ){
                this.showProductoView.stopListening();
                this.showProductoView.undelegateEvents();
            }

            this.showProductoView = new app.ShowProductoView({ model: this.productoModel });
        },

        // Marca
        getMarcasMain: function () {

            if ( this.mainMarcaView instanceof Backbone.View ){
                this.mainMarcaView.stopListening();
                this.mainMarcaView.undelegateEvents();
            }

            this.mainMarcaView = new app.MainMarcasView( );
        },

        getMarcasCreate: function () {
            this.marcaModel = new app.MarcaModel();

            if ( this.createMarcaView instanceof Backbone.View ){
                this.createMarcaView.stopListening();
                this.createMarcaView.undelegateEvents();
            }

            this.createMarcaView = new app.CreateMarcaView({ model: this.marcaModel });
            this.createMarcaView.render();
        },

        getMarcasEdit: function (marcas) {
            this.marcaModel = new app.MarcaModel();
            this.marcaModel.set({'id': marcas}, {'silent':true});

            if ( this.createMarcaView instanceof Backbone.View ){
                this.createMarcaView.stopListening();
                this.createMarcaView.undelegateEvents();
            }

            this.createMarcaView = new app.CreateMarcaView({ model: this.marcaModel });
            this.marcaModel.fetch();
        },

        // Tipo
        getTiposMain: function () {

            if ( this.mainTipoView instanceof Backbone.View ){
                this.mainTipoView.stopListening();
                this.mainTipoView.undelegateEvents();
            }

            this.mainTipoView = new app.MainTiposView( );
        },

        getTiposCreate: function () {
            this.tipoModel = new app.TipoModel();

            if ( this.createTipoView instanceof Backbone.View ){
                this.createTipoView.stopListening();
                this.createTipoView.undelegateEvents();
            }

            this.createTipoView = new app.CreateTipoView({ model: this.tipoModel });
            this.createTipoView.render();
        },

        getTiposEdit: function (tipos) {
            this.tipoModel = new app.TipoModel();
            this.tipoModel.set({'id': tipos}, {'silent':true});

            if ( this.createTipoView instanceof Backbone.View ){
                this.createTipoView.stopListening();
                this.createTipoView.undelegateEvents();
            }

            this.createTipoView = new app.CreateTipoView({ model: this.tipoModel });
            this.tipoModel.fetch();
        },

        // Modelo
        getModelosMain: function () {

            if ( this.mainModeloView instanceof Backbone.View ){
                this.mainModeloView.stopListening();
                this.mainModeloView.undelegateEvents();
            }

            this.mainModeloView = new app.MainModelosView( );
        },

        getModelosCreate: function () {
            this.modeloModel = new app.ModeloModel();

            if ( this.createModeloView instanceof Backbone.View ){
                this.createModeloView.stopListening();
                this.createModeloView.undelegateEvents();
            }

            this.createModeloView = new app.CreateModeloView({ model: this.modeloModel });
            this.createModeloView.render();
        },

        getModelosEdit: function (modelos) {
            this.modeloModel = new app.ModeloModel();
            this.modeloModel.set({'id': modelos}, {'silent':true});

            if ( this.createModeloView instanceof Backbone.View ){
                this.createModeloView.stopListening();
                this.createModeloView.undelegateEvents();
            }

            this.createModeloView = new app.CreateModeloView({ model: this.modeloModel });
            this.modeloModel.fetch();
        },

        // Contador
        getContadoresMain: function () {

            if ( this.mainContadorView instanceof Backbone.View ){
                this.mainContadorView.stopListening();
                this.mainContadorView.undelegateEvents();
            }

            this.mainContadorView = new app.MainContadoresView( );
        },

        getContadoresCreate: function () {
            this.contadorModel = new app.ContadorModel();

            if ( this.createContadorView instanceof Backbone.View ){
                this.createContadorView.stopListening();
                this.createContadorView.undelegateEvents();
            }

            this.createContadorView = new app.CreateContadorView({ model: this.contadorModel });
            this.createContadorView.render();
        },

        getContadoresEdit: function (contadores) {
            this.contadorModel = new app.ContadorModel();
            this.contadorModel.set({'id': contadores}, {'silent':true});

            if ( this.createContadorView instanceof Backbone.View ){
                this.createContadorView.stopListening();
                this.createContadorView.undelegateEvents();
            }

            this.createContadorView = new app.CreateContadorView({ model: this.contadorModel });
            this.contadorModel.fetch();
        },

        /*---------------------
        | Tecnicos
        /*--------------------*/

        // Tipo de Orden
        getTiposOrdenMain: function () {

            if ( this.mainTipoOrdenView instanceof Backbone.View ){
                this.mainTipoOrdenView.stopListening();
                this.mainTipoOrdenView.undelegateEvents();
            }

            this.mainTipoOrdenView = new app.MainTiposOrdenView( );
        },

        getTiposOrdenCreate: function () {
            this.tipoordenModel = new app.TipoOrdenModel();

            if ( this.createTipoOrdenView instanceof Backbone.View ){
                this.createTipoOrdenView.stopListening();
                this.createTipoOrdenView.undelegateEvents();
            }

            this.createTipoOrdenView = new app.CreateTipoOrdenView({ model: this.tipoordenModel });
            this.createTipoOrdenView.render();
        },

        getTiposOrdenEdit: function (tiposorden) {
            this.tipoordenModel = new app.TipoOrdenModel();
            this.tipoordenModel.set({'id': tiposorden}, {'silent':true});

            if ( this.createTipoOrdenView instanceof Backbone.View ){
                this.createTipoOrdenView.stopListening();
                this.createTipoOrdenView.undelegateEvents();
            }

            this.createTipoOrdenView = new app.CreateTipoOrdenView({ model: this.tipoordenModel });
            this.tipoordenModel.fetch();
        },

        // Solicitante
        getSolicitantesMain: function () {

            if ( this.mainSolicitanteView instanceof Backbone.View ){
                this.mainSolicitanteView.stopListening();
                this.mainSolicitanteView.undelegateEvents();
            }

            this.mainSolicitanteView = new app.MainSolicitantesView( );
        },

        getSolicitantesCreate: function () {
            this.solicitanteModel = new app.SolicitanteModel();

            if ( this.createSolicitanteView instanceof Backbone.View ){
                this.createSolicitanteView.stopListening();
                this.createSolicitanteView.undelegateEvents();
            }

            this.createSolicitanteView = new app.CreateSolicitanteView({ model: this.solicitanteModel });
            this.createSolicitanteView.render();
        },

        getSolicitantesEdit: function (solicitantes) {
            this.solicitanteModel = new app.SolicitanteModel();
            this.solicitanteModel.set({'id': solicitantes}, {'silent':true});

            if ( this.createSolicitanteView instanceof Backbone.View ){
                this.createSolicitanteView.stopListening();
                this.createSolicitanteView.undelegateEvents();
            }

            this.createSolicitanteView = new app.CreateSolicitanteView({ model: this.solicitanteModel });
            this.solicitanteModel.fetch();
        },

        // Daños
        getDanosMain: function () {

            if ( this.mainDanoView instanceof Backbone.View ){
                this.mainDanoView.stopListening();
                this.mainDanoView.undelegateEvents();
            }

            this.mainDanoView = new app.MainDanosView( );
        },

        getDanosCreate: function () {
            this.danoModel = new app.DanoModel();

            if ( this.createDanoView instanceof Backbone.View ){
                this.createDanoView.stopListening();
                this.createDanoView.undelegateEvents();
            }

            this.createDanoView = new app.CreateDanoView({ model: this.danoModel });
            this.createDanoView.render();
        },

        getDanosEdit: function (danos) {
            this.danoModel = new app.DanoModel();
            this.danoModel.set({'id': danos}, {'silent':true});

            if ( this.createDanoView instanceof Backbone.View ){
                this.createDanoView.stopListening();
                this.createDanoView.undelegateEvents();
            }

            this.createDanoView = new app.CreateDanoView({ model: this.danoModel });
            this.danoModel.fetch();
        },

        // Prioridad
        getPrioridadesMain: function () {

            if ( this.mainPrioridadView instanceof Backbone.View ){
                this.mainPrioridadView.stopListening();
                this.mainPrioridadView.undelegateEvents();
            }

            this.mainPrioridadView = new app.MainPrioridadesView( );
        },

        getPrioridadesCreate: function () {
            this.prioridadModel = new app.PrioridadModel();

            if ( this.createPrioridadView instanceof Backbone.View ){
                this.createPrioridadView.stopListening();
                this.createPrioridadView.undelegateEvents();
            }

            this.createPrioridadView = new app.CreatePrioridadView({ model: this.prioridadModel });
            this.createPrioridadView.render();
        },

        getPrioridadesEdit: function (prioridades) {
            this.prioridadModel = new app.PrioridadModel();
            this.prioridadModel.set({'id': prioridades}, {'silent':true});

            if ( this.createPrioridadView instanceof Backbone.View ){
                this.createPrioridadView.stopListening();
                this.createPrioridadView.undelegateEvents();
            }

            this.createPrioridadView = new app.CreatePrioridadView({ model: this.prioridadModel });
            this.prioridadModel.fetch();
        },

        //Contratos
        getContratosMain: function(){
            if ( this.mainContratoView instanceof Backbone.View ){
                this.mainContratoView.stopListening();
                this.mainContratoView.undelegateEvents();
            }
            this.mainContratoView = new app.MainContratosView( );

        },

        /**
        * show view show contratos
        */
        getContratoShow: function (contrato) {
            this.contratoModel = new app.ContratoModel();
            this.contratoModel.set({'id': contrato}, {silent: true});

            if ( this.showContratoView instanceof Backbone.View ){
                this.showContratoView.stopListening();
                this.showContratoView.undelegateEvents();
            }

           this.showContratoView = new app.ShowContratoView({ model: this.contratoModel });
        },

        /**
        * show view create Contratos
        */


       getContratosCreate:function(){
            this.contratoModel = new app.ContratoModel();

            if ( this.createContratoView instanceof Backbone.View ){
                this.createContratoView.stopListening();
                this.createContratoView.undelegateEvents();
            }

            this.createContratoView = new app.CreateContratoView({ model: this.contratoModel });
            this.createContratoView.render();
        },

         getContratosEdit: function (contrato) {
            this.contratoModel = new app.ContratoModel();
            this.contratoModel.set({'id': contrato}, {'silent':true});

            if ( this.createContratoView instanceof Backbone.View ){
                this.createContratoView.stopListening();
                this.createContratoView.undelegateEvents();
            }

            this.createContratoView = new app.CreateContratoView({ model: this.contratoModel });
            this.contratoModel.fetch();
        },

        /**
        * show view main ordenes
        */
        getOrdenesMain: function () {
            if ( this.mainOrdenesView instanceof Backbone.View ){
                this.mainOrdenesView.stopListening();
                this.mainOrdenesView.undelegateEvents();
            }

            this.mainOrdenesView = new app.MainOrdenesView( );
        },

        /**
        * show view create ordenes
        */
        getOrdenesCreate: function () {
            this.ordenModel = new app.OrdenModel();

            if ( this.createOrdenView instanceof Backbone.View ){
                this.createOrdenView.stopListening();
                this.createOrdenView.undelegateEvents();
            }

            this.createOrdenView = new app.CreateOrdenView({ model: this.ordenModel });
            this.createOrdenView.render();
        },

        /**
        * show view show orden

        getOrdenesShow: function (orden) {
            this.ordenModel = new app.OrdenModel();
            this.ordenModel.set({'id': orden}, {'silent':true});

            if ( this.showOrdenesView instanceof Backbone.View ){
                this.showOrdenesView.stopListening();
                this.showOrdenesView.undelegateEvents();
            }

            this.showOrdenesView = new app.ShowOrdenesView({ model: this.ordenModel });
        },

        /**
        * show view create visitasp en ordenes ion

        getOrdenesVisitaspCreate: function (queryString) {
            var queries = this.parseQueryString(queryString);

           this.visitapModel = new app.VisitapModel();

            if ( this.createVisitasp2View instanceof Backbone.View ){
                this.createVisitaspView.stopListening();
                this.createVisitaspView.undelegateEvents();
            }

            this.createVisitaspView = new app.VisitaspView({
                model: this.visitapModel,
                parameters: {
                    data : {
                        visitap_orden: queries.orden,
                        visitap: queries.producto
                    }
                }
            });
            this.createVisitaspView.render();
        },

        /**
        * show view edit ordenes
        */
        getOrdenesEdit: function (orden) {
            this.ordenModel = new app.OrdenModel();
            this.ordenModel.set({'id': orden}, {'silent':true});

            if ( this.createOrdenView instanceof Backbone.View ){
                this.createOrdenView.stopListening();
                this.createOrdenView.undelegateEvents();
            }

            this.createOrdenView = new app.CreateOrdenView({ model: this.ordenModel });
            this.ordenModel.fetch();
        },

        // Zonas
        getZonasMain: function () {

            if ( this.mainZonaView instanceof Backbone.View ){
                this.mainZonaView.stopListening();
                this.mainZonaView.undelegateEvents();
            }

            this.mainZonaView = new app.MainZonasView( );
        },

        getZonasCreate: function () {
            this.zonaModel = new app.ZonaModel();

            if ( this.createZonaView instanceof Backbone.View ){
                this.createZonaView.stopListening();
                this.createZonaView.undelegateEvents();
            }

            this.createZonaView = new app.CreateZonaView({ model: this.zonaModel });
            this.createZonaView.render();
        },

        getZonasEdit: function (zonas) {
            this.zonaModel = new app.ZonaModel();
            this.zonaModel.set({'id': zonas}, {'silent':true});

            if ( this.createZonaView instanceof Backbone.View ){
                this.createZonaView.stopListening();
                this.createZonaView.undelegateEvents();
            }

            this.createZonaView = new app.CreateZonaView({ model: this.zonaModel });
            this.zonaModel.fetch();
        },

        // Asignacion #1
        getAsignacionesMain: function () {

            if ( this.mainAsignacion1View instanceof Backbone.View ){
                this.mainAsignacion1View.stopListening();
                this.mainAsignacion1View.undelegateEvents();
            }

            this.mainAsignacion1View = new app.MainAsignacion1sView( );
        },

        getAsignacionesCreate: function () {
            this.asignacion1Model = new app.Asignacion1Model();

            if ( this.createAsignacion1View instanceof Backbone.View ){
                this.createAsignacion1View.stopListening();
                this.createAsignacion1View.undelegateEvents();
            }

            this.createAsignacion1View = new app.CreateAsignacion1View({ model: this.asignacion1Model });
            this.createAsignacion1View.render();
        },

        getAsignacionesShow: function (asignacion) {
            this.asignacion1Model = new app.Asignacion1Model();
            this.asignacion1Model.set({'id': asignacion}, {'silent':true});

            if ( this.showAsignacion1View instanceof Backbone.View ){
                this.showAsignacion1View.stopListening();
                this.showAsignacion1View.undelegateEvents();
            }

            this.showAsignacion1View = new app.ShowAsignacion1View({ model: this.asignacion1Model });
        },

    }) );

})(jQuery, this, this.document);
/**
* Init Class
*/

/*global*/
var app = app || {};

(function ($, window, document, undefined) {

    var InitComponent = function() {

        //Init Attributes
        $.ajaxSetup({
            cache: false,
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            }
        });
    }

    String.prototype.replaceAll = function(search, replace)
    {
        if(!replace)
            return this;
        return this.replace(new RegExp('[' + search + ']', 'g'), replace);
    };

    InitComponent.prototype = {

        /**
        * Constructor or Initialize Method
        */
        initialize: function () {
            //Initialize
            this.initApp();
            this.initICheck();
            this.initAlertify();
            this.initSelect2();
            this.initToUpper();
            this.initSpinner();
            this.initInputMask();
            this.initDatePicker();
            this.initTimePicker();
        },

        /**
        * Init Backbone Application
        */
        initApp: function () {
            window.app.AppRouter.start();
        },

        /**
        * Init icheck
        */
        initICheck: function () {
            $('input').iCheck({
                checkboxClass: 'icheckbox_minimal-red',
                radioClass: 'iradio_minimal-red'
            });
        },

        /**
        * Init alertify
        */
        initAlertify: function () {
            alertify.logPosition("bottom right");
        },

        /**
        * Init select2
        */
        initSelect2: function () {
            $('.select2-default').select2({ language: 'es', placeholder: 'Seleccione', allowClear: false });
            $('.select2-default-clear').select2({ language: 'es', placeholder: 'Seleccione', allowClear: true });
        },

        /**
        * Init toUpper
        */
        initToUpper: function () {
            $('.input-toupper').keyup(function(){
                $(this).val( $(this).val().toUpperCase() );
            });
        },

        /**
        * Init initSpinner
        */
        initSpinner: function () {
            $('.spinner-percentage').spinner({
                step: 0.1,
                start: 0,
                min: 0,
                max: 100,
                numberFormat: "n",
                stop: function( event, ui ) {
                    if(!_.isNull(this.value) && !_.isUndefined(this.value) && !_.isEmpty(this.value)) {
                        if(!$.isNumeric( this.value ) || this.value > 100 || this.value < 0){
                            $(this).spinner( 'value', 0 );
                        }
                    }
               }
            });
        },

        /**
        * Init inputMask
        */
        initInputMask: function () {

            $("[data-mask]").inputmask();

            $("[data-currency]").inputmask({
                radixPoint: ",",
                alias: 'currency',
                removeMaskOnSubmit: true,
                unmaskAsNumber: true,
                min: 0
            });
        },

        /**
        * Init initValidator
        */
        initValidator: function () {

            $('form[data-toggle="validator"]').each(function () {
                var $form = $(this)
                $.fn.validator.call($form, $form.data())
            })
        },

        /**
        * Init Datepicker
        */
        initDatePicker: function () {

            $('.datepicker').datepicker({
                autoclose: true,
                language: 'es',
                format: 'yyyy-mm-dd'
            });
        },

        /**
        * Init Timepicker
        */
        initTimePicker: function () {

            $(".timepicker").timepicker({
                showInputs: false,
                showMeridian: false
            });
        }
    };

    //Init App Components
    //-----------------------
    $(function() {
        window.initComponent = new InitComponent();
        window.initComponent.initialize();
    });

})(jQuery, this, this.document);
//# sourceMappingURL=app.min.js.map
